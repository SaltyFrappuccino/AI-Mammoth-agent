import os
import re
import logging
import json
from typing import List, Dict, Any, Tuple, Optional
import traceback

logger = logging.getLogger("security_analyzer")

class SecurityVulnerability:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(
        self, 
        vuln_type: str,
        severity: str,
        description: str,
        file_path: Optional[str] = None,
        line_number: Optional[int] = None,
        code_snippet: Optional[str] = None,
        mitigation: Optional[str] = None,
        cwe_id: Optional[str] = None
    ):
        self.vuln_type = vuln_type
        self.severity = severity
        self.description = description
        self.file_path = file_path
        self.line_number = line_number
        self.code_snippet = code_snippet
        self.mitigation = mitigation
        self.cwe_id = cwe_id
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "type": self.vuln_type,
            "severity": self.severity,
            "description": self.description,
            "file_path": self.file_path,
            "line_number": self.line_number,
            "code_snippet": self.code_snippet,
            "mitigation": self.mitigation,
            "cwe_id": self.cwe_id
        }
    
    def to_markdown(self) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç Markdown"""
        severity_indicators = {
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è": "üî¥",
            "–í—ã—Å–æ–∫–∞—è": "üü†",
            "–°—Ä–µ–¥–Ω—è—è": "üü°", 
            "–ù–∏–∑–∫–∞—è": "üü¢"
        }
        
        severity_icon = severity_indicators.get(self.severity, "")
        
        md_lines = [
            f"### {severity_icon} {self.vuln_type}",
            f"**–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å**: {self.severity}"
        ]
        
        if self.cwe_id:
            md_lines.append(f"**CWE**: [{self.cwe_id}](https://cwe.mitre.org/data/definitions/{self.cwe_id.replace('CWE-', '')}.html)")
        
        md_lines.append(f"**–û–ø–∏—Å–∞–Ω–∏–µ**: {self.description}")
        
        if self.file_path:
            location = f"{self.file_path}"
            if self.line_number:
                location += f":{self.line_number}"
            md_lines.append(f"**–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ**: `{location}`")
        
        if self.code_snippet:
            md_lines.append("**–ö–æ–¥**:")
            md_lines.append(f"```\n{self.code_snippet}\n```")
        
        if self.mitigation:
            md_lines.append(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é**: {self.mitigation}")
        
        return "\n\n".join(md_lines)

class SecurityAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
    
    # –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    VULNERABILITY_PATTERNS = {
        # SQL Injection
        "SQL Injection": {
            "pattern": r'(?:execute|query|cursor\.execute|db\.query|\.raw)\s*\(\s*(?:f|format|%|\+\s*(?:\w+|\"|\'))\s*.*\)',
            "severity": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è",
            "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–∞–¥–ª–µ–∂–∞—â—É—é —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—é.",
            "cwe_id": "CWE-89",
            "mitigation": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ ORM –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫ –≤ SQL-–∑–∞–ø—Ä–æ—Å–∞—Ö."
        },
        # XSS (Cross-Site Scripting)
        "Cross-Site Scripting (XSS)": {
            "pattern": r'(?:innerHTML|outerHTML|document\.write|eval|setTimeout|setInterval|new\s+Function)\s*\(\s*(?:\w+|\[|\{|\"|\').*\)',
            "severity": "–í—ã—Å–æ–∫–∞—è",
            "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å XSS. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω—ã –≤ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ –Ω–∞–¥–ª–µ–∂–∞—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            "cwe_id": "CWE-79",
            "mitigation": "–≠–∫—Ä–∞–Ω–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –≤ HTML –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è DOM."
        },
        # Command Injection
        "Command Injection": {
            "pattern": r'(?:os\.system|subprocess\.(?:call|Popen|run)|exec|eval|execfile)\s*\(\s*(?:f|format|%|\+\s*(?:\w+|\"|\'))\s*.*\)',
            "severity": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è",
            "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –∏–Ω—ä–µ–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–∞–¥–ª–µ–∂–∞—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.",
            "cwe_id": "CWE-78",
            "mitigation": "–ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ shell=True."
        },
        # Insecure Direct Object Reference (IDOR)
        "Insecure Direct Object Reference": {
            "pattern": r'(?:get|find|select|query|retrieve)(?:_by|_with|_for)?(?:_id|_uuid|_key)\s*\(\s*(?:request|params|query|\.get\()\s*.*\)',
            "severity": "–°—Ä–µ–¥–Ω—è—è",
            "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å IDOR. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∫ –æ–±—ä–µ–∫—Ç–∞–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.",
            "cwe_id": "CWE-639",
            "mitigation": "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –∏–º –æ–±—ä–µ–∫—Ç, –Ω–µ –ø–æ–ª–∞–≥–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ ID –æ–±—ä–µ–∫—Ç–∞."
        },
        # Hard-coded Credentials
        "Hard-coded Credentials": {
            "pattern": r'(?:password|passwd|pwd|secret|key|token|api[_\-]?key)\s*=\s*[\'\"][^\'\"\n]{5,}[\'\"]',
            "severity": "–í—ã—Å–æ–∫–∞—è",
            "description": "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—É.",
            "cwe_id": "CWE-798",
            "mitigation": "–•—Ä–∞–Ω–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∞ –Ω–µ –≤ –∫–æ–¥–µ."
        },
        # Path Traversal
        "Path Traversal": {
            "pattern": r'(?:open|file|read|write)\s*\(\s*(?:f|format|%|\+\s*(?:\w+|\"|\'))\s*.*\)',
            "severity": "–°—Ä–µ–¥–Ω—è—è",
            "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±—Ö–æ–¥–∞ –ø—É—Ç–∏. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—É—Ç–∏ –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–∞–¥–ª–µ–∂–∞—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.",
            "cwe_id": "CWE-22",
            "mitigation": "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–π—Ç–µ –≤—Å–µ –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º."
        },
        # Insecure Cryptographic Storage
        "Insecure Cryptographic Storage": {
            "pattern": r'(?:md5|sha1)\s*\(',
            "severity": "–°—Ä–µ–¥–Ω—è—è",
            "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ (MD5, SHA1).",
            "cwe_id": "CWE-327",
            "mitigation": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ SHA-256 –∏–ª–∏ Argon2, –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ö–µ–º—É —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π."
        },
        # Missing Authentication
        "Missing Authentication": {
            "pattern": r'@(?:app|route|blueprint)\.(?:route|get|post|put|delete|patch)\s*\(\s*[\'\"][^\'\"\n]*[\'\"],\s*(?!auth|login|authenticate)',
            "severity": "–í—ã—Å–æ–∫–∞—è",
            "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ API.",
            "cwe_id": "CWE-306",
            "mitigation": "–î–æ–±–∞–≤—å—Ç–µ –º–µ—Ö–∞–Ω–∏–∑–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ –≤—Å–µ–º –∫–æ–Ω–µ—á–Ω—ã–º —Ç–æ—á–∫–∞–º, —Ç—Ä–µ–±—É—é—â–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        },
        # Insecure Deserialization
        "Insecure Deserialization": {
            "pattern": r'(?:pickle|marshal|shelve|yaml\.load|json\.loads)\s*\(',
            "severity": "–í—ã—Å–æ–∫–∞—è",
            "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è. –ú–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.",
            "cwe_id": "CWE-502",
            "mitigation": "–î–ª—è YAML –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ yaml.safe_load() –≤–º–µ—Å—Ç–æ yaml.load(). –î–ª—è pickle/marshal –Ω–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ–¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
        },
        # Cross-Site Request Forgery (CSRF)
        "Cross-Site Request Forgery": {
            "pattern": r'@csrf_exempt',
            "severity": "–°—Ä–µ–¥–Ω—è—è",
            "description": "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç CSRF –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—è–∑–≤–∏–º—ã–º –¥–ª—è –º–µ–∂—Å–∞–π—Ç–æ–≤–æ–π –ø–æ–¥–¥–µ–ª–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.",
            "cwe_id": "CWE-352",
            "mitigation": "–í–∫–ª—é—á–∏—Ç–µ –∑–∞—â–∏—Ç—É CSRF –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç CSRF-–∞—Ç–∞–∫."
        },
        # Unvalidated Redirects
        "Unvalidated Redirects": {
            "pattern": r'(?:redirect|HttpResponseRedirect)\s*\(\s*(?:request|params|\.get\(|f|format|%|\+\s*(?:\w+|\"|\'))\s*.*\)',
            "severity": "–°—Ä–µ–¥–Ω—è—è",
            "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –¶–µ–ª–µ–≤–æ–π URL –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–∞–¥–ª–µ–∂–∞—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.",
            "cwe_id": "CWE-601",
            "mitigation": "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤—Å–µ URL-–∞–¥—Ä–µ—Å–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤."
        },
        # JWT Issues
        "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ JWT": {
            "pattern": r'(?:jwt\.encode|jwt\.decode)\s*\(\s*.*,\s*["\'](?!HS256|RS256|ES256)[^"\']*["\']\s*\)',
            "severity": "–°—Ä–µ–¥–Ω—è—è",
            "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ JWT. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (HS256, RS256, ES256).",
            "cwe_id": "CWE-327",
            "mitigation": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è JWT, —Ç–∞–∫–∏–µ –∫–∞–∫ HS256, RS256 –∏–ª–∏ ES256."
        },
        # API Key Exposure
        "API Key Exposure": {
            "pattern": r'[A-Za-z0-9_]{20,}',
            "severity": "–°—Ä–µ–¥–Ω—è—è",
            "description": "–í–æ–∑–º–æ–∂–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ API-–∫–ª—é—á–∞ –≤ –∫–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ API-–∫–ª—é—á–æ–º.",
            "cwe_id": "CWE-312",
            "mitigation": "–•—Ä–∞–Ω–∏—Ç–µ API-–∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∞ –Ω–µ –≤ –∫–æ–¥–µ."
        }
    }
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.vulnerabilities: List[SecurityVulnerability] = []
    
    def analyze_file(self, file_path: str) -> List[SecurityVulnerability]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        Args:
            file_path (str): –ü—É—Ç—å –∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            List[SecurityVulnerability]: –°–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        """
        file_vulnerabilities = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.isfile(file_path):
                logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤)
            _, ext = os.path.splitext(file_path)
            if ext.lower() not in ['.py', '.js', '.ts', '.jsx', '.tsx', '.php', '.rb', '.java', '.go', '.cs']:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º: {file_path}")
                return []
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                lines = content.split('\n')
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —à–∞–±–ª–æ–Ω–∞–º —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            for vuln_type, vuln_info in self.VULNERABILITY_PATTERNS.items():
                pattern = re.compile(vuln_info["pattern"])
                
                # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ
                for i, line in enumerate(lines):
                    match = pattern.search(line)
                    if match:
                        # –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                        start_line = max(0, i - 2)
                        end_line = min(len(lines) - 1, i + 2)
                        code_snippet = "\n".join([
                            f"{j+1}: {lines[j]}" for j in range(start_line, end_line + 1)
                        ])
                        
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏
                        vulnerability = SecurityVulnerability(
                            vuln_type=vuln_type,
                            severity=vuln_info["severity"],
                            description=vuln_info["description"],
                            file_path=file_path,
                            line_number=i + 1,
                            code_snippet=code_snippet,
                            mitigation=vuln_info.get("mitigation"),
                            cwe_id=vuln_info.get("cwe_id")
                        )
                        
                        file_vulnerabilities.append(vulnerability)
                        self.vulnerabilities.append(vulnerability)
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {file_path} –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(file_vulnerabilities)}")
            return file_vulnerabilities
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            logger.error(traceback.format_exc())
            return []
    
    def analyze_directory(self, directory_path: str, exclude_dirs: List[str] = None) -> List[SecurityVulnerability]:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        Args:
            directory_path (str): –ü—É—Ç—å –∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            exclude_dirs (List[str], optional): –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            
        Returns:
            List[SecurityVulnerability]: –°–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        """
        if exclude_dirs is None:
            exclude_dirs = ['.git', '.venv', 'venv', 'node_modules', '__pycache__', 'dist', 'build']
        
        all_vulnerabilities = []
        
        try:
            for root, dirs, files in os.walk(directory_path):
                # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –æ–±—Ö–æ–¥–∞
                dirs[:] = [d for d in dirs if d not in exclude_dirs]
                
                for file in files:
                    file_path = os.path.join(root, file)
                    file_vulnerabilities = self.analyze_file(file_path)
                    all_vulnerabilities.extend(file_vulnerabilities)
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory_path} –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(all_vulnerabilities)}")
            return all_vulnerabilities
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory_path}: {str(e)}")
            logger.error(traceback.format_exc())
            return []
    
    def get_vulnerability_summary(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
        
        Returns:
            Dict[str, Any]: –°–≤–æ–¥–∫–∞ –æ —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
        """
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º
        vuln_by_type = {}
        for vuln in self.vulnerabilities:
            vuln_by_type[vuln.vuln_type] = vuln_by_type.get(vuln.vuln_type, 0) + 1
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        vuln_by_severity = {}
        for vuln in self.vulnerabilities:
            vuln_by_severity[vuln.severity] = vuln_by_severity.get(vuln.severity, 0) + 1
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ —Ñ–∞–π–ª–∞–º
        vuln_by_file = {}
        for vuln in self.vulnerabilities:
            if vuln.file_path:
                vuln_by_file[vuln.file_path] = vuln_by_file.get(vuln.file_path, 0) + 1
        
        return {
            "total_vulnerabilities": len(self.vulnerabilities),
            "by_severity": vuln_by_severity,
            "by_type": vuln_by_type,
            "by_file": vuln_by_file,
            "top_vulnerable_files": sorted(
                vuln_by_file.items(), 
                key=lambda x: x[1], 
                reverse=True
            )[:5] if vuln_by_file else []
        }
    
    def to_dict(self) -> Dict[str, Any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
        
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        return {
            "vulnerabilities": [vuln.to_dict() for vuln in self.vulnerabilities],
            "summary": self.get_vulnerability_summary()
        }
    
    def to_markdown(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Markdown-–æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        Returns:
            str: Markdown-–æ—Ç—á–µ—Ç
        """
        if not self.vulnerabilities:
            return "# –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n–£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        
        summary = self.get_vulnerability_summary()
        
        sections = ["# –û—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å–æ —Å–≤–æ–¥–∫–æ–π
        sections.append("## –°–≤–æ–¥–∫–∞\n")
        sections.append(f"- **–í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π**: {summary['total_vulnerabilities']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        severity_order = ["–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è", "–í—ã—Å–æ–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ù–∏–∑–∫–∞—è"]
        if summary.get('by_severity'):
            sections.append("\n### –ü–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏\n")
            for severity in severity_order:
                if severity in summary['by_severity']:
                    sections.append(f"- **{severity}**: {summary['by_severity'][severity]}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏ –ø–æ —Ç–∏–ø–∞–º
        if summary.get('by_type'):
            sections.append("\n### –ü–æ —Ç–∏–ø–∞–º —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n")
            for vuln_type, count in sorted(summary['by_type'].items(), key=lambda x: x[1], reverse=True):
                sections.append(f"- **{vuln_type}**: {count}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å –Ω–∞–∏–±–æ–ª–µ–µ —É—è–∑–≤–∏–º—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        if summary.get('top_vulnerable_files'):
            sections.append("\n### –ù–∞–∏–±–æ–ª–µ–µ —É—è–∑–≤–∏–º—ã–µ —Ñ–∞–π–ª—ã\n")
            for file_path, count in summary['top_vulnerable_files']:
                sections.append(f"- **{file_path}**: {count} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        vulnerabilities_by_severity = {}
        for vuln in self.vulnerabilities:
            if vuln.severity not in vulnerabilities_by_severity:
                vulnerabilities_by_severity[vuln.severity] = []
            vulnerabilities_by_severity[vuln.severity].append(vuln)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—ã —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        severity_headers = {
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è": "## üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
            "–í—ã—Å–æ–∫–∞—è": "## üü† –í—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
            "–°—Ä–µ–¥–Ω—è—è": "## üü° –°—Ä–µ–¥–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
            "–ù–∏–∑–∫–∞—è": "## üü¢ –ù–∏–∑–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"
        }
        
        for severity in severity_order:
            if severity in vulnerabilities_by_severity and vulnerabilities_by_severity[severity]:
                sections.append(f"\n{severity_headers.get(severity, f'## –£—è–∑–≤–∏–º–æ—Å—Ç–∏ ({severity})')}\n")
                for vuln in vulnerabilities_by_severity[severity]:
                    sections.append(vuln.to_markdown())
                    sections.append("\n---\n")
        
        return "\n".join(sections)
    
    def save_to_file(self, filename: str, format: str = 'json') -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª
        
        Args:
            filename (str): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            format (str, optional): –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ ('json' –∏–ª–∏ 'md')
        """
        try:
            if format.lower() == 'json':
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(self.to_dict(), f, ensure_ascii=False, indent=2)
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª JSON: {filename}")
            elif format.lower() in ['md', 'markdown']:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.to_markdown())
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª Markdown: {filename}")
            else:
                logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {format}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª {filename}: {str(e)}")
            logger.error(traceback.format_exc())

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    analyzer = SecurityAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    analyzer.analyze_directory(".")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
    summary = analyzer.get_vulnerability_summary()
    print(f"–í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {summary['total_vulnerabilities']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    analyzer.save_to_file("security_report.md", format='md')
    analyzer.save_to_file("security_report.json", format='json') 