2025-03-02 19:11:34,091 - analysis-api - INFO - Starting API server
2025-03-02 19:12:16,427 - analysis-api - INFO - Received analysis request
2025-03-02 19:12:16,429 - analysis-api - INFO - Request data sizes: requirements=712, code=4987, test_cases=4840, documentation=4037, semantic_db=1494
2025-03-02 19:12:16,429 - analysis-api - INFO - Starting analysis process
2025-03-02 19:12:16,430 - analysis-api - INFO - Using new semantic_db format with 4 services
2025-03-02 19:12:16,430 - analysis-api - INFO - Initializing SemanticDB with 4 documents
2025-03-02 19:12:16,431 - semantic_db - INFO - Initializing SemanticDB
2025-03-02 19:12:17,110 - semantic_db - INFO - Documents provided, type: dict
2025-03-02 19:12:17,111 - semantic_db - INFO - New format detected: dictionary with 4 service descriptions
2025-03-02 19:12:17,122 - semantic_db - INFO - Adding service descriptions for 4 services
2025-03-02 19:12:17,124 - semantic_db - INFO - Split 4 documents into 4 chunks
2025-03-02 19:12:17,302 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 19:12:18,065 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:12:18,189 - semantic_db - INFO - Successfully added service descriptions
2025-03-02 19:12:18,189 - analysis-api - INFO - Initializing Aggregator
2025-03-02 19:12:18,190 - aggregator - INFO - Initializing Aggregator
2025-03-02 19:12:18,190 - aggregator - INFO - Semantic DB provided, initializing SemanticAgent
2025-03-02 19:12:18,191 - analysis-api - INFO - Calling aggregator.aggregate method
2025-03-02 19:12:18,191 - aggregator - INFO - Starting aggregation process
2025-03-02 19:12:18,191 - aggregator - INFO - Calling RequirementsAgent
2025-03-02 19:12:18,192 - semantic_db - INFO - Searching for: 'Требования к системе управления задачами (Task Management System):
    
    1. Система должна позволять пользователям создавать новые задачи с указанием названия, описания и срока выполнения.
    2. Пользователи должны иметь возможность просматривать список всех своих задач.
    3. Пользователи должны иметь возможность отмечать задачи как выполненные.
    4. Система должна поддерживать фильтрацию задач по статусу (выполнено/не выполнено).
    5. Система должна отправлять уведомления о приближающихся сроках выполнения задач.
    6. Система должна интегрироваться с внешними сервисами хранения файлов для прикрепления документов к задачам.
    7. API должно быть защищено с использованием JWT-аутентификации.' with k=3
2025-03-02 19:12:18,829 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:12:19,032 - semantic_db - INFO - Found 3 documents
2025-03-02 19:12:19,200 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 19:12:23,176 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:12:23,194 - aggregator - INFO - Calling CodeAgent
2025-03-02 19:12:27,704 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:12:27,726 - aggregator - INFO - Calling TestCasesAgent
2025-03-02 19:12:30,602 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:12:30,620 - aggregator - INFO - Calling DocumentationAgent
2025-03-02 19:12:30,622 - semantic_db - INFO - Searching for: '# API документация системы управления задачами
    
    ## Аутентификация
    
    API использует JWT-токены для аутентификации. Чтобы получить токен, нужно сначала зарегистрироваться, а затем войти в систему.
    
    ## Эндпоинты
    
    ### Регистрация и аутентификация
    
    #### POST /register
    Регистрация нового пользователя.
    
    Запрос:
    ```json
    {
        "username": "имя_пользователя",
        "password": "пароль"
    }
    ```
    
    #### POST /login
    Вход в систему и получение JWT-токена.
    
    Запрос:
    ```json
    {
        "username": "имя_пользователя",
        "password": "пароль"
    }
    ```
    
    Ответ:
    ```json
    {
        "token": "jwt_token"
    }
    ```
    
    ### Управление задачами
    
    #### POST /tasks
    Создание новой задачи. Требует JWT-токен в заголовке Authorization.
    
    Запрос:
    ```json
    {
        "title": "Название задачи",
        "description": "Описание задачи",
        "due_date": "2023-12-31"
    }
    ```
    
    #### GET /tasks
    Получение списка всех задач пользователя. Требует JWT-токен в заголовке Authorization.
    
    Параметры запроса:
    - status: фильтр по статусу (completed/pending)
    
    #### PUT /tasks/{task_id}
    Обновление задачи. Требует JWT-токен в заголовке Authorization.
    
    Запрос:
    ```json
    {
        "title": "Новое название",
        "description": "Новое описание",
        "due_date": "2023-12-31",
        "completed": true
    }
    ```
    
    #### PUT /tasks/{task_id}/complete
    Отметить задачу как выполненную. Требует JWT-токен в заголовке Authorization.
    """
    
    # ЧАСТЬ 5: Семантическая база данных с описаниями сервисов
    service_descriptions = {
        "AuthService": """
        Сервис аутентификации и авторизации пользователей.
        
        Функциональность:
        - Регистрация новых пользователей
        - Аутентификация пользователей
        - Генерация JWT-токенов
        - Проверка токенов и прав доступа
        - Восстановление паролей
        
        Сервис использует безопасное хранение паролей с применением алгоритмов хеширования.
        Поддерживает разные уровни доступа и роли пользователей.
        Интегрируется с внешними провайдерами OAuth для авторизации через социальные сети.
        """,
        
        "TaskService": """
        Сервис управления задачами пользователя.
        
        Функциональность:
        - Создание задач с параметрами (название, описание, срок)
        - Получение списка задач с фильтрацией
        - Обновление данных задачи
        - Отметка о выполнении задачи
        - Установка приоритетов задач
        - Группировка задач по категориям
        
        Сервис обеспечивает персистентное хранение данных и защиту от несанкционированного доступа.
        Поддерживает поиск и сортировку задач по различным параметрам.
        """,
        
        "NotificationService": """
        Сервис отправки уведомлений пользователям.
        
        Функциональность:
        - Отправка уведомлений о приближающихся сроках задач
        - Поддержка различных каналов доставки (email, push, SMS)
        - Настройка шаблонов уведомлений
        - Управление частотой и временем отправки
        - Отслеживание статуса доставки уведомлений
        
        Сервис интегрируется с внешними провайдерами для отправки сообщений.
        Поддерживает локализацию и персонализацию уведомлений.
        Имеет механизм очередей для надежной доставки уведомлений.
        """,
        
        "StorageService": """
        Сервис хранения файлов и вложений.
        
        Функциональность:
        - Загрузка файлов и привязка их к задачам
        - Скачивание файлов
        - Управление доступом к файлам
        - Поддержка различных типов файлов
        - Ограничения по размеру и типам файлов
        
        Сервис поддерживает шифрование файлов при хранении.
        Обеспечивает резервное копирование данных.
        Интегрируется с облачными хранилищами (AWS S3, Google Cloud Storage).' with k=3
2025-03-02 19:12:30,856 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 413 Request Entity Too Large"
2025-03-02 19:12:30,859 - semantic_db - ERROR - Error during search: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 915"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 15:12:30 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': '953d8183-21bf-4ebf-9fa4-f1919e0d6886', 'x-session-id': '18efeb4e-f609-4a55-a636-d9b74c606f00', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))
2025-03-02 19:12:30,866 - semantic_db - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\semantic_db.py", line 113, in search
    docs = self.db.similarity_search(query, k=k)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 608, in similarity_search
    docs_and_scores = self.similarity_search_with_score(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 705, in similarity_search_with_score
    query_embedding = self._embedding_function.embed_query(query)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 196, in embed_query
    return self.embed_documents(texts=[text])[0]
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 142, in embed_documents
    for embedding in self._client.embeddings(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 266, in embeddings
    return self._decorator(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 249, in _decorator
    return call()
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 267, in <lambda>
    lambda: post_embeddings.sync(self._client, access_token=self.token, input_=texts, model=model)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\post_embeddings.py", line 34, in sync
    return build_response(response, Embeddings)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\utils.py", line 85, in build_response
    raise ResponseError(response.url, response.status_code, response.content, response.headers)
gigachat.exceptions.ResponseError: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 915"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 15:12:30 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': '953d8183-21bf-4ebf-9fa4-f1919e0d6886', 'x-session-id': '18efeb4e-f609-4a55-a636-d9b74c606f00', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))

2025-03-02 19:12:33,126 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:12:33,128 - aggregator - INFO - Evaluating code compliance
2025-03-02 19:12:34,581 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:12:34,582 - aggregator - INFO - Estimating bugs
2025-03-02 19:12:36,062 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:12:36,065 - aggregator - INFO - Generating final report
2025-03-02 19:12:43,983 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:12:44,172 - aggregator - INFO - Querying semantic information for 4 services
2025-03-02 19:12:44,172 - semantic_db - INFO - Querying service: PaymentService
2025-03-02 19:12:44,903 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:12:44,931 - semantic_db - INFO - Found information for service: PaymentService
2025-03-02 19:12:44,931 - semantic_db - INFO - Querying service: NotificationService
2025-03-02 19:12:45,573 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:12:45,587 - semantic_db - INFO - Found information for service: NotificationService
2025-03-02 19:12:45,588 - semantic_db - INFO - Querying service: AuthService
2025-03-02 19:12:46,206 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:12:46,227 - semantic_db - INFO - Found information for service: AuthService
2025-03-02 19:12:46,228 - semantic_db - INFO - Querying service: StorageService
2025-03-02 19:12:46,856 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:12:46,873 - semantic_db - INFO - Found information for service: StorageService
2025-03-02 19:12:46,873 - aggregator - INFO - Evaluating analysis
2025-03-02 19:12:47,615 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:12:47,615 - aggregator - INFO - Aggregation completed successfully
2025-03-02 19:12:47,615 - analysis-api - INFO - Analysis completed successfully
2025-03-02 19:12:47,615 - analysis-api - INFO - Returning successful response
2025-03-02 19:18:47,695 - analysis-api - INFO - Starting API server
2025-03-02 19:18:55,771 - analysis-api - INFO - Received analysis request
2025-03-02 19:18:55,773 - analysis-api - INFO - Request data sizes: requirements=712, code=4987, test_cases=4840, documentation=4037, semantic_db=1494
2025-03-02 19:18:55,774 - analysis-api - INFO - Starting analysis process
2025-03-02 19:18:55,774 - analysis-api - INFO - Using new semantic_db format with 4 services
2025-03-02 19:18:55,774 - analysis-api - INFO - Initializing SemanticDB with 4 documents
2025-03-02 19:18:55,774 - semantic_db - INFO - Initializing SemanticDB
2025-03-02 19:18:56,529 - semantic_db - INFO - Documents provided, type: dict
2025-03-02 19:18:56,529 - semantic_db - INFO - New format detected: dictionary with 4 service descriptions
2025-03-02 19:18:56,530 - semantic_db - INFO - Adding service descriptions for 4 services
2025-03-02 19:18:56,531 - semantic_db - INFO - Split 4 documents into 4 chunks
2025-03-02 19:18:56,753 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 19:18:57,524 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:18:57,662 - semantic_db - INFO - Successfully added service descriptions
2025-03-02 19:18:57,663 - analysis-api - INFO - Initializing Aggregator
2025-03-02 19:18:57,663 - aggregator - INFO - Initializing Aggregator
2025-03-02 19:18:57,665 - aggregator - INFO - Semantic DB provided, initializing SemanticAgent
2025-03-02 19:18:57,665 - analysis-api - INFO - Calling aggregator.aggregate method
2025-03-02 19:18:57,665 - aggregator - INFO - Starting aggregation process
2025-03-02 19:18:57,665 - aggregator - INFO - Calling RequirementsAgent
2025-03-02 19:18:57,666 - semantic_db - INFO - Searching for: 'Требования к системе управления задачами (Task Management System):
    
    1. Система должна позволять пользователям создавать новые задачи с указанием названия, описания и срока выполнения.
    2. Пользователи должны иметь возможность просматривать список всех своих задач.
    3. Пользователи должны иметь возможность отмечать задачи как выполненные.
    4. Система должна поддерживать фильтрацию задач по статусу (выполнено/не выполнено).
    5. Система должна отправлять уведомления о приближающихся сроках выполнения задач.
    6. Система должна интегрироваться с внешними сервисами хранения файлов для прикрепления документов к задачам.
    7. API должно быть защищено с использованием JWT-аутентификации.' with k=3
2025-03-02 19:18:58,323 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:18:58,533 - semantic_db - INFO - Found 3 documents
2025-03-02 19:18:58,674 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 19:19:02,512 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:19:02,535 - aggregator - INFO - Calling CodeAgent
2025-03-02 19:19:06,159 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:19:06,182 - aggregator - INFO - Calling TestCasesAgent
2025-03-02 19:19:10,971 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:19:10,994 - aggregator - INFO - Calling DocumentationAgent
2025-03-02 19:19:10,995 - semantic_db - INFO - Searching for: '# API документация системы управления задачами
    
    ## Аутентификация
    
    API использует JWT-токены для аутентификации. Чтобы получить токен, нужно сначала зарегистрироваться, а затем войти в систему.
    
    ## Эндпоинты
    
    ### Регистрация и аутентификация
    
    #### POST /register
    Регистрация нового пользователя.
    
    Запрос:
    ```json
    {
        "username": "имя_пользователя",
        "password": "пароль"
    }
    ```
    
    #### POST /login
    Вход в систему и получение JWT-токена.
    
    Запрос:
    ```json
    {
        "username": "имя_пользователя",
        "password": "пароль"
    }
    ```
    
    Ответ:
    ```json
    {
        "token": "jwt_token"
    }
    ```
    
    ### Управление задачами
    
    #### POST /tasks
    Создание новой задачи. Требует JWT-токен в заголовке Authorization.
    
    Запрос:
    ```json
    {
        "title": "Название задачи",
        "description": "Описание задачи",
        "due_date": "2023-12-31"
    }
    ```
    
    #### GET /tasks
    Получение списка всех задач пользователя. Требует JWT-токен в заголовке Authorization.
    
    Параметры запроса:
    - status: фильтр по статусу (completed/pending)
    
    #### PUT /tasks/{task_id}
    Обновление задачи. Требует JWT-токен в заголовке Authorization.
    
    Запрос:
    ```json
    {
        "title": "Новое название",
        "description": "Новое описание",
        "due_date": "2023-12-31",
        "completed": true
    }
    ```
    
    #### PUT /tasks/{task_id}/complete
    Отметить задачу как выполненную. Требует JWT-токен в заголовке Authorization.
    """
    
    # ЧАСТЬ 5: Семантическая база данных с описаниями сервисов
    service_descriptions = {
        "AuthService": """
        Сервис аутентификации и авторизации пользователей.
        
        Функциональность:
        - Регистрация новых пользователей
        - Аутентификация пользователей
        - Генерация JWT-токенов
        - Проверка токенов и прав доступа
        - Восстановление паролей
        
        Сервис использует безопасное хранение паролей с применением алгоритмов хеширования.
        Поддерживает разные уровни доступа и роли пользователей.
        Интегрируется с внешними провайдерами OAuth для авторизации через социальные сети.
        """,
        
        "TaskService": """
        Сервис управления задачами пользователя.
        
        Функциональность:
        - Создание задач с параметрами (название, описание, срок)
        - Получение списка задач с фильтрацией
        - Обновление данных задачи
        - Отметка о выполнении задачи
        - Установка приоритетов задач
        - Группировка задач по категориям
        
        Сервис обеспечивает персистентное хранение данных и защиту от несанкционированного доступа.
        Поддерживает поиск и сортировку задач по различным параметрам.
        """,
        
        "NotificationService": """
        Сервис отправки уведомлений пользователям.
        
        Функциональность:
        - Отправка уведомлений о приближающихся сроках задач
        - Поддержка различных каналов доставки (email, push, SMS)
        - Настройка шаблонов уведомлений
        - Управление частотой и временем отправки
        - Отслеживание статуса доставки уведомлений
        
        Сервис интегрируется с внешними провайдерами для отправки сообщений.
        Поддерживает локализацию и персонализацию уведомлений.
        Имеет механизм очередей для надежной доставки уведомлений.
        """,
        
        "StorageService": """
        Сервис хранения файлов и вложений.
        
        Функциональность:
        - Загрузка файлов и привязка их к задачам
        - Скачивание файлов
        - Управление доступом к файлам
        - Поддержка различных типов файлов
        - Ограничения по размеру и типам файлов
        
        Сервис поддерживает шифрование файлов при хранении.
        Обеспечивает резервное копирование данных.
        Интегрируется с облачными хранилищами (AWS S3, Google Cloud Storage).' with k=3
2025-03-02 19:19:11,232 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 413 Request Entity Too Large"
2025-03-02 19:19:11,232 - semantic_db - ERROR - Error during search: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 915"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 15:19:11 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': '2d312fbf-f58c-4fde-8e05-d4e49998ce4e', 'x-session-id': 'd3bda7e3-6623-4ebb-bdf7-09b6ed488022', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))
2025-03-02 19:19:11,244 - semantic_db - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\semantic_db.py", line 113, in search
    docs = self.db.similarity_search(query, k=k)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 608, in similarity_search
    docs_and_scores = self.similarity_search_with_score(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 705, in similarity_search_with_score
    query_embedding = self._embedding_function.embed_query(query)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 196, in embed_query
    return self.embed_documents(texts=[text])[0]
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 142, in embed_documents
    for embedding in self._client.embeddings(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 266, in embeddings
    return self._decorator(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 249, in _decorator
    return call()
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 267, in <lambda>
    lambda: post_embeddings.sync(self._client, access_token=self.token, input_=texts, model=model)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\post_embeddings.py", line 34, in sync
    return build_response(response, Embeddings)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\utils.py", line 85, in build_response
    raise ResponseError(response.url, response.status_code, response.content, response.headers)
gigachat.exceptions.ResponseError: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 915"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 15:19:11 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': '2d312fbf-f58c-4fde-8e05-d4e49998ce4e', 'x-session-id': 'd3bda7e3-6623-4ebb-bdf7-09b6ed488022', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))

2025-03-02 19:19:13,176 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:19:13,183 - aggregator - INFO - Evaluating code compliance
2025-03-02 19:19:15,553 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:19:15,555 - aggregator - INFO - Estimating bugs
2025-03-02 19:19:16,129 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:19:16,131 - aggregator - INFO - Generating final report
2025-03-02 19:19:21,651 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:19:21,834 - aggregator - INFO - Querying semantic information for 4 services
2025-03-02 19:19:21,835 - semantic_db - INFO - Querying service: StorageService
2025-03-02 19:19:22,564 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:19:22,576 - semantic_db - INFO - Found information for service: StorageService
2025-03-02 19:19:22,577 - semantic_db - INFO - Querying service: NotificationService
2025-03-02 19:19:23,209 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:19:23,223 - semantic_db - INFO - Found information for service: NotificationService
2025-03-02 19:19:23,223 - semantic_db - INFO - Querying service: PaymentService
2025-03-02 19:19:23,863 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:19:23,877 - semantic_db - INFO - Found information for service: PaymentService
2025-03-02 19:19:23,878 - semantic_db - INFO - Querying service: AuthService
2025-03-02 19:19:24,509 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:19:24,522 - semantic_db - INFO - Found information for service: AuthService
2025-03-02 19:19:24,524 - aggregator - INFO - Evaluating analysis
2025-03-02 19:19:25,137 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:19:25,138 - aggregator - INFO - Aggregation completed successfully
2025-03-02 19:19:25,140 - analysis-api - INFO - Analysis completed successfully
2025-03-02 19:19:25,140 - analysis-api - INFO - Returning successful response
2025-03-02 19:21:31,513 - analysis-api - INFO - Starting API server
2025-03-02 19:21:34,219 - analysis-api - INFO - Received analysis request
2025-03-02 19:21:34,221 - analysis-api - INFO - Request data sizes: requirements=712, code=4987, test_cases=4840, documentation=4037, semantic_db=1494
2025-03-02 19:21:34,221 - analysis-api - INFO - Starting analysis process
2025-03-02 19:21:34,222 - analysis-api - INFO - Using new semantic_db format with 4 services
2025-03-02 19:21:34,223 - analysis-api - INFO - Initializing SemanticDB with 4 documents
2025-03-02 19:21:34,223 - semantic_db - INFO - Initializing SemanticDB
2025-03-02 19:21:34,937 - semantic_db - INFO - Documents provided, type: dict
2025-03-02 19:21:34,937 - semantic_db - INFO - New format detected: dictionary with 4 service descriptions
2025-03-02 19:21:34,938 - semantic_db - INFO - Adding service descriptions for 4 services
2025-03-02 19:21:34,939 - semantic_db - INFO - Split 4 documents into 4 chunks
2025-03-02 19:21:35,114 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 19:21:35,868 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:21:36,006 - semantic_db - INFO - Successfully added service descriptions
2025-03-02 19:21:36,007 - analysis-api - INFO - Initializing Aggregator
2025-03-02 19:21:36,007 - aggregator - INFO - Initializing Aggregator
2025-03-02 19:21:36,008 - aggregator - INFO - Semantic DB provided, initializing SemanticAgent
2025-03-02 19:21:36,008 - analysis-api - INFO - Calling aggregator.aggregate method
2025-03-02 19:21:36,009 - aggregator - INFO - Starting aggregation process
2025-03-02 19:21:36,009 - aggregator - INFO - Calling RequirementsAgent
2025-03-02 19:21:36,010 - semantic_db - INFO - Searching for: 'Требования к системе управления задачами (Task Management System):
    
    1. Система должна позволять пользователям создавать новые задачи с указанием названия, описания и срока выполнения.
    2. Пользователи должны иметь возможность просматривать список всех своих задач.
    3. Пользователи должны иметь возможность отмечать задачи как выполненные.
    4. Система должна поддерживать фильтрацию задач по статусу (выполнено/не выполнено).
    5. Система должна отправлять уведомления о приближающихся сроках выполнения задач.
    6. Система должна интегрироваться с внешними сервисами хранения файлов для прикрепления документов к задачам.
    7. API должно быть защищено с использованием JWT-аутентификации.' with k=3
2025-03-02 19:21:36,641 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:21:36,842 - semantic_db - INFO - Found 3 documents
2025-03-02 19:21:36,980 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 19:21:58,148 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:21:58,168 - aggregator - INFO - Calling CodeAgent
2025-03-02 19:22:21,955 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:22:21,970 - aggregator - INFO - Calling TestCasesAgent
2025-03-02 19:22:43,167 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:22:43,188 - aggregator - INFO - Calling DocumentationAgent
2025-03-02 19:22:43,188 - semantic_db - INFO - Searching for: '# API документация системы управления задачами
    
    ## Аутентификация
    
    API использует JWT-токены для аутентификации. Чтобы получить токен, нужно сначала зарегистрироваться, а затем войти в систему.
    
    ## Эндпоинты
    
    ### Регистрация и аутентификация
    
    #### POST /register
    Регистрация нового пользователя.
    
    Запрос:
    ```json
    {
        "username": "имя_пользователя",
        "password": "пароль"
    }
    ```
    
    #### POST /login
    Вход в систему и получение JWT-токена.
    
    Запрос:
    ```json
    {
        "username": "имя_пользователя",
        "password": "пароль"
    }
    ```
    
    Ответ:
    ```json
    {
        "token": "jwt_token"
    }
    ```
    
    ### Управление задачами
    
    #### POST /tasks
    Создание новой задачи. Требует JWT-токен в заголовке Authorization.
    
    Запрос:
    ```json
    {
        "title": "Название задачи",
        "description": "Описание задачи",
        "due_date": "2023-12-31"
    }
    ```
    
    #### GET /tasks
    Получение списка всех задач пользователя. Требует JWT-токен в заголовке Authorization.
    
    Параметры запроса:
    - status: фильтр по статусу (completed/pending)
    
    #### PUT /tasks/{task_id}
    Обновление задачи. Требует JWT-токен в заголовке Authorization.
    
    Запрос:
    ```json
    {
        "title": "Новое название",
        "description": "Новое описание",
        "due_date": "2023-12-31",
        "completed": true
    }
    ```
    
    #### PUT /tasks/{task_id}/complete
    Отметить задачу как выполненную. Требует JWT-токен в заголовке Authorization.
    """
    
    # ЧАСТЬ 5: Семантическая база данных с описаниями сервисов
    service_descriptions = {
        "AuthService": """
        Сервис аутентификации и авторизации пользователей.
        
        Функциональность:
        - Регистрация новых пользователей
        - Аутентификация пользователей
        - Генерация JWT-токенов
        - Проверка токенов и прав доступа
        - Восстановление паролей
        
        Сервис использует безопасное хранение паролей с применением алгоритмов хеширования.
        Поддерживает разные уровни доступа и роли пользователей.
        Интегрируется с внешними провайдерами OAuth для авторизации через социальные сети.
        """,
        
        "TaskService": """
        Сервис управления задачами пользователя.
        
        Функциональность:
        - Создание задач с параметрами (название, описание, срок)
        - Получение списка задач с фильтрацией
        - Обновление данных задачи
        - Отметка о выполнении задачи
        - Установка приоритетов задач
        - Группировка задач по категориям
        
        Сервис обеспечивает персистентное хранение данных и защиту от несанкционированного доступа.
        Поддерживает поиск и сортировку задач по различным параметрам.
        """,
        
        "NotificationService": """
        Сервис отправки уведомлений пользователям.
        
        Функциональность:
        - Отправка уведомлений о приближающихся сроках задач
        - Поддержка различных каналов доставки (email, push, SMS)
        - Настройка шаблонов уведомлений
        - Управление частотой и временем отправки
        - Отслеживание статуса доставки уведомлений
        
        Сервис интегрируется с внешними провайдерами для отправки сообщений.
        Поддерживает локализацию и персонализацию уведомлений.
        Имеет механизм очередей для надежной доставки уведомлений.
        """,
        
        "StorageService": """
        Сервис хранения файлов и вложений.
        
        Функциональность:
        - Загрузка файлов и привязка их к задачам
        - Скачивание файлов
        - Управление доступом к файлам
        - Поддержка различных типов файлов
        - Ограничения по размеру и типам файлов
        
        Сервис поддерживает шифрование файлов при хранении.
        Обеспечивает резервное копирование данных.
        Интегрируется с облачными хранилищами (AWS S3, Google Cloud Storage).' with k=3
2025-03-02 19:22:43,443 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 413 Request Entity Too Large"
2025-03-02 19:22:43,444 - semantic_db - ERROR - Error during search: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 915"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 15:22:43 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': 'aa463352-97bc-407e-be10-8e07d850d2d2', 'x-session-id': '6b8c323d-6e60-445d-86b4-89721c400847', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))
2025-03-02 19:22:43,449 - semantic_db - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\semantic_db.py", line 113, in search
    docs = self.db.similarity_search(query, k=k)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 608, in similarity_search
    docs_and_scores = self.similarity_search_with_score(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 705, in similarity_search_with_score
    query_embedding = self._embedding_function.embed_query(query)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 196, in embed_query
    return self.embed_documents(texts=[text])[0]
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 142, in embed_documents
    for embedding in self._client.embeddings(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 266, in embeddings
    return self._decorator(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 249, in _decorator
    return call()
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 267, in <lambda>
    lambda: post_embeddings.sync(self._client, access_token=self.token, input_=texts, model=model)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\post_embeddings.py", line 34, in sync
    return build_response(response, Embeddings)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\utils.py", line 85, in build_response
    raise ResponseError(response.url, response.status_code, response.content, response.headers)
gigachat.exceptions.ResponseError: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 915"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 15:22:43 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': 'aa463352-97bc-407e-be10-8e07d850d2d2', 'x-session-id': '6b8c323d-6e60-445d-86b4-89721c400847', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))

2025-03-02 19:22:59,612 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:22:59,634 - aggregator - INFO - Evaluating code compliance
2025-03-02 19:23:03,560 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:23:03,562 - aggregator - INFO - Estimating bugs
2025-03-02 19:23:04,695 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:23:04,696 - aggregator - INFO - Generating final report
2025-03-02 19:23:18,357 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:23:18,548 - aggregator - INFO - Querying semantic information for 4 services
2025-03-02 19:23:18,549 - semantic_db - INFO - Querying service: PaymentService
2025-03-02 19:23:19,288 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:23:19,304 - semantic_db - INFO - Found information for service: PaymentService
2025-03-02 19:23:19,304 - semantic_db - INFO - Querying service: StorageService
2025-03-02 19:23:19,934 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:23:19,950 - semantic_db - INFO - Found information for service: StorageService
2025-03-02 19:23:19,951 - semantic_db - INFO - Querying service: NotificationService
2025-03-02 19:23:20,597 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:23:20,611 - semantic_db - INFO - Found information for service: NotificationService
2025-03-02 19:23:20,611 - semantic_db - INFO - Querying service: AuthService
2025-03-02 19:23:21,240 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:23:21,257 - semantic_db - INFO - Found information for service: AuthService
2025-03-02 19:23:21,257 - aggregator - INFO - Evaluating analysis
2025-03-02 19:23:26,383 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 19:23:26,385 - aggregator - INFO - Aggregation completed successfully
2025-03-02 19:23:26,386 - analysis-api - INFO - Analysis completed successfully
2025-03-02 19:23:26,386 - analysis-api - INFO - Returning successful response
2025-03-02 19:32:00,156 - analysis-api - INFO - Received analysis request
2025-03-02 19:32:00,156 - analysis-api - INFO - Request data sizes: requirements=1174, code=10336, test_cases=6389, documentation=2062, semantic_db=13778
2025-03-02 19:32:00,156 - analysis-api - INFO - Starting analysis process
2025-03-02 19:32:00,156 - analysis-api - INFO - Using new semantic_db format with 5 services
2025-03-02 19:32:00,156 - analysis-api - INFO - Initializing SemanticDB with 5 documents
2025-03-02 19:32:00,156 - semantic_db - INFO - Initializing SemanticDB
2025-03-02 19:32:00,478 - semantic_db - INFO - Documents provided, type: dict
2025-03-02 19:32:00,478 - semantic_db - INFO - New format detected: dictionary with 5 service descriptions
2025-03-02 19:32:00,478 - semantic_db - INFO - Adding service descriptions for 5 services
2025-03-02 19:32:00,494 - semantic_db - INFO - Split 5 documents into 5 chunks
2025-03-02 19:32:01,298 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:32:01,438 - semantic_db - INFO - Successfully added service descriptions
2025-03-02 19:32:01,438 - analysis-api - INFO - Initializing Aggregator
2025-03-02 19:32:01,438 - aggregator - INFO - Initializing Aggregator
2025-03-02 19:32:01,438 - aggregator - INFO - Semantic DB provided, initializing SemanticAgent
2025-03-02 19:32:01,438 - analysis-api - INFO - Calling aggregator.aggregate method
2025-03-02 19:32:01,438 - aggregator - INFO - Starting aggregation process
2025-03-02 19:32:01,438 - aggregator - INFO - Calling RequirementsAgent
2025-03-02 19:32:01,438 - semantic_db - INFO - Searching for: 'ТРЕБОВАНИЯ:

Требования к системе бронирования отелей (Hotel Booking API):

1. Система должна позволять пользователям регистрироваться и авторизовываться с использованием JWT-токенов.
2. Пользователи должны иметь возможность просматривать список доступных отелей с фильтрацией по городу, датам, количеству гостей и ценовому диапазону.
3. Система должна обеспечивать возможность просмотра детальной информации о выбранном отеле, включая описание, удобства, фотографии и отзывы.
4. Пользователи должны иметь возможность бронировать номера на указанные даты с выбором типа номера и дополнительных услуг.
5. Система должна отправлять подтверждение бронирования на электронную почту пользователя.
6. Пользователи должны иметь возможность просматривать историю своих бронирований и отменять бронирования, если до даты заезда осталось более 48 часов.
7. Система должна интегрироваться с внешними платежными системами для проведения оплаты бронирования.
8. API должно быть защищено от атак типа SQL-инъекций и XSS.
9. Система должна обеспечивать высокую доступность с временем отклика не более 300 мс для 95% запросов.
10. API должно включать документацию в формате OpenAPI/Swagger.' with k=3
2025-03-02 19:32:02,048 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 19:32:02,064 - semantic_db - INFO - Found 3 documents
2025-03-02 19:32:32,203 - aggregator - ERROR - Error in aggregation process: The read operation timed out
2025-03-02 19:32:32,228 - aggregator - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\connection.py", line 103, in handle_request
    return self._connection.handle_request(request)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\http11.py", line 136, in handle_request
    raise exc
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\http11.py", line 106, in handle_request
    ) = self._receive_response_headers(**kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\http11.py", line 177, in _receive_response_headers
    event = self._receive_event(timeout=timeout)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\http11.py", line 217, in _receive_event
    data = self._network_stream.read(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_backends\sync.py", line 128, in read
    return self._sock.recv(max_bytes)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\contextlib.py", line 137, in __exit__
    self.gen.throw(typ, value, traceback)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ReadTimeout: The read operation timed out

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\aggregator.py", line 61, in aggregate
    req_analysis = self.requirements_agent.call(requirements_text)
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\agents\requirements_agent.py", line 62, in call
    return super().call(input_text)
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\agents\base_agent.py", line 16, in call
    response = llm.invoke(messages)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\language_models\chat_models.py", line 277, in invoke
    self.generate_prompt(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\language_models\chat_models.py", line 777, in generate_prompt
    return self.generate(prompt_messages, stop=stop, callbacks=callbacks, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\language_models\chat_models.py", line 634, in generate
    raise e
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\language_models\chat_models.py", line 624, in generate
    self._generate_with_cache(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\language_models\chat_models.py", line 846, in _generate_with_cache
    result = self._generate(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\chat_models\gigachat.py", line 436, in _generate
    response = self._client.chat(payload)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 295, in chat
    return self._decorator(lambda: post_chat.sync(self._client, chat=chat, access_token=self.token))
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 249, in _decorator
    return call()
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 295, in <lambda>
    return self._decorator(lambda: post_chat.sync(self._client, chat=chat, access_token=self.token))
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\post_chat.py", line 31, in sync
    response = client.request(**kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_client.py", line 837, in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\contextlib.py", line 137, in __exit__
    self.gen.throw(typ, value, traceback)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ReadTimeout: The read operation timed out

2025-03-02 19:32:32,231 - analysis-api - INFO - Analysis completed successfully
2025-03-02 19:32:32,231 - analysis-api - INFO - Returning successful response
2025-03-02 20:10:05,165 - analysis-api - INFO - Starting API server
2025-03-02 20:10:13,410 - analysis-api - INFO - Received analysis request
2025-03-02 20:10:13,411 - analysis-api - INFO - Request data sizes: requirements=1174, code=10336, test_cases=6389, documentation=2062, semantic_db=13778
2025-03-02 20:10:13,412 - analysis-api - INFO - Starting analysis process
2025-03-02 20:10:13,413 - analysis-api - INFO - Using new semantic_db format with 5 services
2025-03-02 20:10:13,414 - analysis-api - INFO - Initializing SemanticDB with 5 documents
2025-03-02 20:10:13,414 - semantic_db - INFO - Initializing SemanticDB
2025-03-02 20:10:14,203 - semantic_db - INFO - Documents provided, type: dict
2025-03-02 20:10:14,205 - semantic_db - INFO - New format detected: dictionary with 5 service descriptions
2025-03-02 20:10:14,205 - semantic_db - INFO - Adding service descriptions for 5 services
2025-03-02 20:10:14,205 - semantic_db - INFO - Split 5 documents into 5 chunks
2025-03-02 20:10:14,480 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 20:10:15,285 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 20:10:15,472 - semantic_db - INFO - Successfully added service descriptions
2025-03-02 20:10:15,472 - analysis-api - INFO - Initializing Aggregator
2025-03-02 20:10:15,472 - aggregator - INFO - Initializing Aggregator
2025-03-02 20:10:15,474 - aggregator - INFO - Semantic DB provided, initializing SemanticAgent
2025-03-02 20:10:15,474 - analysis-api - INFO - Calling aggregator.aggregate method
2025-03-02 20:10:15,474 - aggregator - INFO - Starting aggregation process
2025-03-02 20:10:15,474 - aggregator - INFO - Calling RequirementsAgent
2025-03-02 20:10:15,474 - semantic_db - INFO - Searching for: 'ТРЕБОВАНИЯ:

Требования к системе бронирования отелей (Hotel Booking API):

1. Система должна позволять пользователям регистрироваться и авторизовываться с использованием JWT-токенов.
2. Пользователи должны иметь возможность просматривать список доступных отелей с фильтрацией по городу, датам, количеству гостей и ценовому диапазону.
3. Система должна обеспечивать возможность просмотра детальной информации о выбранном отеле, включая описание, удобства, фотографии и отзывы.
4. Пользователи должны иметь возможность бронировать номера на указанные даты с выбором типа номера и дополнительных услуг.
5. Система должна отправлять подтверждение бронирования на электронную почту пользователя.
6. Пользователи должны иметь возможность просматривать историю своих бронирований и отменять бронирования, если до даты заезда осталось более 48 часов.
7. Система должна интегрироваться с внешними платежными системами для проведения оплаты бронирования.
8. API должно быть защищено от атак типа SQL-инъекций и XSS.
9. Система должна обеспечивать высокую доступность с временем отклика не более 300 мс для 95% запросов.
10. API должно включать документацию в формате OpenAPI/Swagger.' with k=3
2025-03-02 20:10:16,085 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 20:10:16,256 - semantic_db - INFO - Found 3 documents
2025-03-02 20:10:16,401 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 20:10:46,519 - aggregator - ERROR - Error in aggregation process: The read operation timed out
2025-03-02 20:10:46,529 - aggregator - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\connection.py", line 103, in handle_request
    return self._connection.handle_request(request)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\http11.py", line 136, in handle_request
    raise exc
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\http11.py", line 106, in handle_request
    ) = self._receive_response_headers(**kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\http11.py", line 177, in _receive_response_headers
    event = self._receive_event(timeout=timeout)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_sync\http11.py", line 217, in _receive_event
    data = self._network_stream.read(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_backends\sync.py", line 128, in read
    return self._sock.recv(max_bytes)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\contextlib.py", line 137, in __exit__
    self.gen.throw(typ, value, traceback)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ReadTimeout: The read operation timed out

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\aggregator.py", line 61, in aggregate
    req_analysis = self.requirements_agent.call(requirements_text)
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\agents\requirements_agent.py", line 62, in call
    return super().call(input_text)
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\agents\base_agent.py", line 16, in call
    response = llm.invoke(messages)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\language_models\chat_models.py", line 284, in invoke
    self.generate_prompt(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\language_models\chat_models.py", line 860, in generate_prompt
    return self.generate(prompt_messages, stop=stop, callbacks=callbacks, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\language_models\chat_models.py", line 690, in generate
    self._generate_with_cache(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\language_models\chat_models.py", line 925, in _generate_with_cache
    result = self._generate(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\chat_models\gigachat.py", line 436, in _generate
    response = self._client.chat(payload)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 295, in chat
    return self._decorator(lambda: post_chat.sync(self._client, chat=chat, access_token=self.token))
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 254, in _decorator
    return call()
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 295, in <lambda>
    return self._decorator(lambda: post_chat.sync(self._client, chat=chat, access_token=self.token))
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\post_chat.py", line 31, in sync
    response = client.request(**kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_client.py", line 837, in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\contextlib.py", line 137, in __exit__
    self.gen.throw(typ, value, traceback)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ReadTimeout: The read operation timed out

2025-03-02 20:10:46,531 - analysis-api - INFO - Analysis completed successfully
2025-03-02 20:10:46,532 - analysis-api - INFO - Returning successful response
2025-03-02 20:15:39,162 - analysis-api - INFO - Starting API server
2025-03-02 20:15:43,318 - analysis-api - INFO - Received analysis request
2025-03-02 20:15:43,319 - analysis-api - INFO - Request data sizes: requirements=1174, code=10336, test_cases=6389, documentation=2062, semantic_db=13778
2025-03-02 20:15:43,319 - analysis-api - INFO - Starting analysis process
2025-03-02 20:15:43,319 - analysis-api - INFO - Using new semantic_db format with 5 services
2025-03-02 20:15:43,320 - analysis-api - INFO - Initializing SemanticDB with 5 documents
2025-03-02 20:15:43,320 - semantic_db - INFO - Initializing SemanticDB
2025-03-02 20:15:44,079 - semantic_db - INFO - Documents provided, type: dict
2025-03-02 20:15:44,080 - semantic_db - INFO - New format detected: dictionary with 5 service descriptions
2025-03-02 20:15:44,080 - semantic_db - INFO - Adding service descriptions for 5 services
2025-03-02 20:15:44,081 - semantic_db - INFO - Split 5 documents into 5 chunks
2025-03-02 20:15:44,270 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 20:15:45,048 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 20:15:45,230 - semantic_db - INFO - Successfully added service descriptions
2025-03-02 20:15:45,231 - analysis-api - INFO - Initializing Aggregator
2025-03-02 20:15:45,232 - aggregator - INFO - Initializing Aggregator
2025-03-02 20:15:45,232 - aggregator - INFO - Semantic DB provided, initializing SemanticAgent
2025-03-02 20:15:45,233 - analysis-api - INFO - Calling aggregator.aggregate method
2025-03-02 20:15:45,233 - aggregator - INFO - Starting aggregation process
2025-03-02 20:15:45,233 - aggregator - INFO - Calling RequirementsAgent
2025-03-02 20:15:45,233 - semantic_db - INFO - Searching for: 'ТРЕБОВАНИЯ:

Требования к системе бронирования отелей (Hotel Booking API):

1. Система должна позволять пользователям регистрироваться и авторизовываться с использованием JWT-токенов.
2. Пользователи должны иметь возможность просматривать список доступных отелей с фильтрацией по городу, датам, количеству гостей и ценовому диапазону.
3. Система должна обеспечивать возможность просмотра детальной информации о выбранном отеле, включая описание, удобства, фотографии и отзывы.
4. Пользователи должны иметь возможность бронировать номера на указанные даты с выбором типа номера и дополнительных услуг.
5. Система должна отправлять подтверждение бронирования на электронную почту пользователя.
6. Пользователи должны иметь возможность просматривать историю своих бронирований и отменять бронирования, если до даты заезда осталось более 48 часов.
7. Система должна интегрироваться с внешними платежными системами для проведения оплаты бронирования.
8. API должно быть защищено от атак типа SQL-инъекций и XSS.
9. Система должна обеспечивать высокую доступность с временем отклика не более 300 мс для 95% запросов.
10. API должно включать документацию в формате OpenAPI/Swagger.' with k=2
2025-03-02 20:15:45,837 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 20:15:46,032 - semantic_db - INFO - Found 2 documents
2025-03-02 20:15:46,032 - requirements_agent - INFO - Требования с контекстом: 2321 символов
2025-03-02 20:15:46,180 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 20:16:21,844 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:16:21,878 - aggregator - INFO - RequirementsAgent completed successfully
2025-03-02 20:16:21,878 - aggregator - INFO - Calling CodeAgent
2025-03-02 20:16:59,954 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:16:59,974 - aggregator - INFO - CodeAgent completed successfully
2025-03-02 20:16:59,975 - aggregator - INFO - Calling TestCasesAgent
2025-03-02 20:17:29,074 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:17:29,106 - aggregator - INFO - TestCasesAgent completed successfully
2025-03-02 20:17:29,106 - aggregator - INFO - Calling DocumentationAgent
2025-03-02 20:17:29,107 - semantic_db - INFO - Searching for: 'ДОКУМЕНТАЦИЯ:

# Документация по API системы бронирования отелей

## Обзор

API системы бронирования отелей предоставляет возможности для поиска и бронирования номеров в отелях, а также управления бронированиями. API разработано с использованием RESTful подхода и защищено JWT-аутентификацией.

## Аутентификация

Все запросы к защищенным эндпоинтам должны включать JWT-токен в заголовке Authorization. Для получения токена необходимо зарегистрироваться и войти в систему.

### Регистрация

**POST /register**

Регистрация нового пользователя в системе.

Запрос:
```json
{
    "username": "имя_пользователя",
    "password": "пароль",
    "email": "почта@пример.com"
}
```

### Вход в систему

**POST /login**

Аутентификация пользователя и получение JWT-токена.

Запрос:
```json
{
    "username": "имя_пользователя",
    "password": "пароль"
}
```

Ответ:
```json
{
    "token": "jwt_token"
}
```

## Поиск и просмотр отелей

### Получение списка отелей

**GET /hotels**

Возвращает список отелей с возможностью фильтрации.

Параметры запроса:
- city - город
- min_price - минимальная цена за ночь
- max_price - максимальная цена за ночь
- guests - количество гостей

### Детальная информация об отеле

**GET /hotels/{hotel_id}**

Возвращает подробную информацию об указанном отеле, включая описание, удобства, фотографии и отзывы.

## Управление бронированиями

### Создание бронирования

**POST /bookings**

Создает новое бронирование отеля. Требует JWT-токен в заголовке Authorization.

Запрос:
```json
{
    "hotel_id": 1,
    "room_type": "Стандартный",
    "check_in": "2023-12-20T14:00:00",
    "check_out": "2023-12-25T12:00:00",
    "guests": 2,
    "additional_services": ["Трансфер", "Завтрак"]
}
```

### Получение списка бронирований

**GET /bookings**

Возвращает список всех бронирований текущего пользователя. Требует JWT-токен в заголовке Authorization.

### Отмена бронирования

**PUT /bookings/{booking_id}/cancel**

Отменяет существующее бронирование, если до даты заезда осталось более 48 часов. Требует JWT-токен в заголовке Authorization.' with k=3
2025-03-02 20:17:29,330 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 413 Request Entity Too Large"
2025-03-02 20:17:29,332 - semantic_db - ERROR - Error during search: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 615"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 16:17:29 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': '7585c6d6-e479-4993-a0fe-f7ee98047bbe', 'x-session-id': '3c9b4f81-f3c7-4c3b-afa6-88c9d561f5ed', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))
2025-03-02 20:17:29,337 - semantic_db - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\semantic_db.py", line 113, in search
    docs = self.db.similarity_search(query, k=k)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 608, in similarity_search
    docs_and_scores = self.similarity_search_with_score(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 705, in similarity_search_with_score
    query_embedding = self._embedding_function.embed_query(query)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 196, in embed_query
    return self.embed_documents(texts=[text])[0]
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 142, in embed_documents
    for embedding in self._client.embeddings(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 266, in embeddings
    return self._decorator(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 249, in _decorator
    return call()
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 267, in <lambda>
    lambda: post_embeddings.sync(self._client, access_token=self.token, input_=texts, model=model)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\post_embeddings.py", line 34, in sync
    return build_response(response, Embeddings)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\utils.py", line 85, in build_response
    raise ResponseError(response.url, response.status_code, response.content, response.headers)
gigachat.exceptions.ResponseError: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 615"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 16:17:29 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': '7585c6d6-e479-4993-a0fe-f7ee98047bbe', 'x-session-id': '3c9b4f81-f3c7-4c3b-afa6-88c9d561f5ed', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))

2025-03-02 20:17:43,244 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:17:43,246 - aggregator - INFO - DocumentationAgent completed successfully
2025-03-02 20:17:43,246 - aggregator - INFO - Evaluating compliance
2025-03-02 20:17:47,735 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:17:47,738 - aggregator - INFO - Compliance evaluation completed successfully
2025-03-02 20:17:47,739 - aggregator - INFO - Estimating potential bugs
2025-03-02 20:17:58,975 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:17:58,994 - aggregator - INFO - Bug estimation completed successfully
2025-03-02 20:17:58,994 - aggregator - INFO - Generating final report
2025-03-02 20:18:36,906 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:18:36,931 - aggregator - INFO - Final report generated successfully
2025-03-02 20:18:36,932 - analysis-api - INFO - Analysis completed successfully
2025-03-02 20:18:36,933 - analysis-api - INFO - Returning successful response
2025-03-02 20:32:26,475 - analysis-api - INFO - Starting API server
2025-03-02 20:32:39,852 - analysis-api - INFO - Received analysis request
2025-03-02 20:32:39,854 - analysis-api - INFO - Request data sizes: requirements=1174, code=10336, test_cases=6389, documentation=2062, semantic_db=13778
2025-03-02 20:32:39,857 - analysis-api - WARNING - Enhanced features are not available
2025-03-02 20:32:39,858 - analysis-api - INFO - Starting analysis process
2025-03-02 20:32:39,858 - analysis-api - INFO - Using new semantic_db format with 5 services
2025-03-02 20:32:39,858 - analysis-api - INFO - Initializing SemanticDB with 5 documents
2025-03-02 20:32:39,860 - semantic_db - INFO - Initializing SemanticDB
2025-03-02 20:32:40,613 - semantic_db - INFO - Documents provided, type: dict
2025-03-02 20:32:40,613 - semantic_db - INFO - New format detected: dictionary with 5 service descriptions
2025-03-02 20:32:40,613 - semantic_db - INFO - Adding service descriptions for 5 services
2025-03-02 20:32:40,613 - semantic_db - INFO - Split 5 documents into 5 chunks
2025-03-02 20:32:40,838 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 20:32:41,639 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 20:32:41,805 - semantic_db - INFO - Successfully added service descriptions
2025-03-02 20:32:41,805 - analysis-api - INFO - Initializing Aggregator
2025-03-02 20:32:41,805 - aggregator - INFO - Initializing Aggregator
2025-03-02 20:32:41,812 - aggregator - INFO - Semantic DB provided, initializing SemanticAgent
2025-03-02 20:32:41,813 - analysis-api - INFO - Calling aggregator.aggregate method
2025-03-02 20:32:41,813 - aggregator - INFO - Starting aggregation process
2025-03-02 20:32:41,815 - aggregator - INFO - Calling RequirementsAgent
2025-03-02 20:32:41,816 - semantic_db - INFO - Searching for: 'ТРЕБОВАНИЯ:

Требования к системе бронирования отелей (Hotel Booking API):

1. Система должна позволять пользователям регистрироваться и авторизовываться с использованием JWT-токенов.
2. Пользователи должны иметь возможность просматривать список доступных отелей с фильтрацией по городу, датам, количеству гостей и ценовому диапазону.
3. Система должна обеспечивать возможность просмотра детальной информации о выбранном отеле, включая описание, удобства, фотографии и отзывы.
4. Пользователи должны иметь возможность бронировать номера на указанные даты с выбором типа номера и дополнительных услуг.
5. Система должна отправлять подтверждение бронирования на электронную почту пользователя.
6. Пользователи должны иметь возможность просматривать историю своих бронирований и отменять бронирования, если до даты заезда осталось более 48 часов.
7. Система должна интегрироваться с внешними платежными системами для проведения оплаты бронирования.
8. API должно быть защищено от атак типа SQL-инъекций и XSS.
9. Система должна обеспечивать высокую доступность с временем отклика не более 300 мс для 95% запросов.
10. API должно включать документацию в формате OpenAPI/Swagger.' with k=2
2025-03-02 20:32:42,530 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 20:32:42,713 - semantic_db - INFO - Found 2 documents
2025-03-02 20:32:42,713 - requirements_agent - INFO - Требования с контекстом: 2321 символов
2025-03-02 20:32:42,876 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 20:33:14,598 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:33:14,600 - aggregator - INFO - RequirementsAgent completed successfully
2025-03-02 20:33:14,601 - aggregator - INFO - Calling CodeAgent
2025-03-02 20:33:49,708 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:33:49,738 - aggregator - INFO - CodeAgent completed successfully
2025-03-02 20:33:49,738 - aggregator - INFO - Calling TestCasesAgent
2025-03-02 20:34:14,979 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:34:14,999 - aggregator - INFO - TestCasesAgent completed successfully
2025-03-02 20:34:15,000 - aggregator - INFO - Calling DocumentationAgent
2025-03-02 20:34:15,000 - semantic_db - INFO - Searching for: 'ДОКУМЕНТАЦИЯ:

# Документация по API системы бронирования отелей

## Обзор

API системы бронирования отелей предоставляет возможности для поиска и бронирования номеров в отелях, а также управления бронированиями. API разработано с использованием RESTful подхода и защищено JWT-аутентификацией.

## Аутентификация

Все запросы к защищенным эндпоинтам должны включать JWT-токен в заголовке Authorization. Для получения токена необходимо зарегистрироваться и войти в систему.

### Регистрация

**POST /register**

Регистрация нового пользователя в системе.

Запрос:
```json
{
    "username": "имя_пользователя",
    "password": "пароль",
    "email": "почта@пример.com"
}
```

### Вход в систему

**POST /login**

Аутентификация пользователя и получение JWT-токена.

Запрос:
```json
{
    "username": "имя_пользователя",
    "password": "пароль"
}
```

Ответ:
```json
{
    "token": "jwt_token"
}
```

## Поиск и просмотр отелей

### Получение списка отелей

**GET /hotels**

Возвращает список отелей с возможностью фильтрации.

Параметры запроса:
- city - город
- min_price - минимальная цена за ночь
- max_price - максимальная цена за ночь
- guests - количество гостей

### Детальная информация об отеле

**GET /hotels/{hotel_id}**

Возвращает подробную информацию об указанном отеле, включая описание, удобства, фотографии и отзывы.

## Управление бронированиями

### Создание бронирования

**POST /bookings**

Создает новое бронирование отеля. Требует JWT-токен в заголовке Authorization.

Запрос:
```json
{
    "hotel_id": 1,
    "room_type": "Стандартный",
    "check_in": "2023-12-20T14:00:00",
    "check_out": "2023-12-25T12:00:00",
    "guests": 2,
    "additional_services": ["Трансфер", "Завтрак"]
}
```

### Получение списка бронирований

**GET /bookings**

Возвращает список всех бронирований текущего пользователя. Требует JWT-токен в заголовке Authorization.

### Отмена бронирования

**PUT /bookings/{booking_id}/cancel**

Отменяет существующее бронирование, если до даты заезда осталось более 48 часов. Требует JWT-токен в заголовке Authorization.' with k=3
2025-03-02 20:34:15,260 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 413 Request Entity Too Large"
2025-03-02 20:34:15,261 - semantic_db - ERROR - Error during search: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 615"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 16:34:15 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': '118b7959-f621-4066-965c-c917a170894d', 'x-session-id': '7688d53b-9424-4818-ac2d-bbf31d0d7600', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))
2025-03-02 20:34:15,265 - semantic_db - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\semantic_db.py", line 113, in search
    docs = self.db.similarity_search(query, k=k)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 608, in similarity_search
    docs_and_scores = self.similarity_search_with_score(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 705, in similarity_search_with_score
    query_embedding = self._embedding_function.embed_query(query)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 196, in embed_query
    return self.embed_documents(texts=[text])[0]
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 142, in embed_documents
    for embedding in self._client.embeddings(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 266, in embeddings
    return self._decorator(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 249, in _decorator
    return call()
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 267, in <lambda>
    lambda: post_embeddings.sync(self._client, access_token=self.token, input_=texts, model=model)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\post_embeddings.py", line 34, in sync
    return build_response(response, Embeddings)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\utils.py", line 85, in build_response
    raise ResponseError(response.url, response.status_code, response.content, response.headers)
gigachat.exceptions.ResponseError: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 615"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 16:34:15 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': '118b7959-f621-4066-965c-c917a170894d', 'x-session-id': '7688d53b-9424-4818-ac2d-bbf31d0d7600', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))

2025-03-02 20:34:25,791 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:34:25,792 - aggregator - INFO - DocumentationAgent completed successfully
2025-03-02 20:34:25,793 - aggregator - INFO - Evaluating compliance
2025-03-02 20:34:30,916 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:34:30,918 - aggregator - INFO - Compliance evaluation completed successfully
2025-03-02 20:34:30,919 - aggregator - INFO - Estimating potential bugs
2025-03-02 20:34:32,304 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:34:32,306 - aggregator - INFO - Bug estimation completed successfully
2025-03-02 20:34:32,306 - aggregator - INFO - Generating final report
2025-03-02 20:35:06,434 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:35:06,467 - aggregator - INFO - Final report generated successfully
2025-03-02 20:35:06,470 - analysis-api - INFO - Analysis completed successfully
2025-03-02 20:35:06,470 - analysis-api - INFO - Returning successful response
2025-03-02 20:43:51,415 - analysis-api - INFO - Starting API server
2025-03-02 20:43:56,840 - analysis-api - INFO - Received analysis request
2025-03-02 20:43:56,840 - analysis-api - INFO - Request data sizes: requirements=1174, code=10336, test_cases=6389, documentation=2062, semantic_db=13778
2025-03-02 20:43:56,840 - analysis-api - WARNING - Enhanced features are not available
2025-03-02 20:43:56,840 - analysis-api - INFO - Starting analysis process
2025-03-02 20:43:56,840 - analysis-api - INFO - Using new semantic_db format with 5 services
2025-03-02 20:43:56,840 - analysis-api - INFO - Initializing SemanticDB with 5 documents
2025-03-02 20:43:56,840 - semantic_db - INFO - Initializing SemanticDB
2025-03-02 20:43:57,583 - semantic_db - INFO - Documents provided, type: dict
2025-03-02 20:43:57,583 - semantic_db - INFO - New format detected: dictionary with 5 service descriptions
2025-03-02 20:43:57,585 - semantic_db - INFO - Adding service descriptions for 5 services
2025-03-02 20:43:57,586 - semantic_db - INFO - Split 5 documents into 5 chunks
2025-03-02 20:43:57,761 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 20:43:58,564 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 20:43:58,801 - semantic_db - INFO - Successfully added service descriptions
2025-03-02 20:43:58,801 - analysis-api - INFO - Initializing Aggregator
2025-03-02 20:43:58,801 - aggregator - INFO - Initializing Aggregator
2025-03-02 20:43:58,801 - aggregator - INFO - Semantic DB provided, initializing SemanticAgent
2025-03-02 20:43:58,801 - analysis-api - INFO - Calling aggregator.aggregate method
2025-03-02 20:43:58,801 - aggregator - INFO - Starting aggregation process
2025-03-02 20:43:58,801 - aggregator - INFO - Calling requirements analysis agent
2025-03-02 20:43:58,801 - semantic_db - INFO - Searching for: 'ТРЕБОВАНИЯ:

Требования к системе бронирования отелей (Hotel Booking API):

1. Система должна позволять пользователям регистрироваться и авторизовываться с использованием JWT-токенов.
2. Пользователи должны иметь возможность просматривать список доступных отелей с фильтрацией по городу, датам, количеству гостей и ценовому диапазону.
3. Система должна обеспечивать возможность просмотра детальной информации о выбранном отеле, включая описание, удобства, фотографии и отзывы.
4. Пользователи должны иметь возможность бронировать номера на указанные даты с выбором типа номера и дополнительных услуг.
5. Система должна отправлять подтверждение бронирования на электронную почту пользователя.
6. Пользователи должны иметь возможность просматривать историю своих бронирований и отменять бронирования, если до даты заезда осталось более 48 часов.
7. Система должна интегрироваться с внешними платежными системами для проведения оплаты бронирования.
8. API должно быть защищено от атак типа SQL-инъекций и XSS.
9. Система должна обеспечивать высокую доступность с временем отклика не более 300 мс для 95% запросов.
10. API должно включать документацию в формате OpenAPI/Swagger.' with k=2
2025-03-02 20:43:59,422 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 20:43:59,607 - semantic_db - INFO - Found 2 documents
2025-03-02 20:43:59,613 - requirements_agent - INFO - Требования с контекстом: 2321 символов
2025-03-02 20:43:59,748 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 20:44:29,441 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:44:29,464 - aggregator - INFO - Calling code analysis agent
2025-03-02 20:45:03,292 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:45:03,310 - aggregator - INFO - Calling test cases analysis agent
2025-03-02 20:45:35,070 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:45:35,082 - aggregator - INFO - Calling documentation analysis agent
2025-03-02 20:45:35,082 - semantic_db - INFO - Searching for: 'ДОКУМЕНТАЦИЯ:

# Документация по API системы бронирования отелей

## Обзор

API системы бронирования отелей предоставляет возможности для поиска и бронирования номеров в отелях, а также управления бронированиями. API разработано с использованием RESTful подхода и защищено JWT-аутентификацией.

## Аутентификация

Все запросы к защищенным эндпоинтам должны включать JWT-токен в заголовке Authorization. Для получения токена необходимо зарегистрироваться и войти в систему.

### Регистрация

**POST /register**

Регистрация нового пользователя в системе.

Запрос:
```json
{
    "username": "имя_пользователя",
    "password": "пароль",
    "email": "почта@пример.com"
}
```

### Вход в систему

**POST /login**

Аутентификация пользователя и получение JWT-токена.

Запрос:
```json
{
    "username": "имя_пользователя",
    "password": "пароль"
}
```

Ответ:
```json
{
    "token": "jwt_token"
}
```

## Поиск и просмотр отелей

### Получение списка отелей

**GET /hotels**

Возвращает список отелей с возможностью фильтрации.

Параметры запроса:
- city - город
- min_price - минимальная цена за ночь
- max_price - максимальная цена за ночь
- guests - количество гостей

### Детальная информация об отеле

**GET /hotels/{hotel_id}**

Возвращает подробную информацию об указанном отеле, включая описание, удобства, фотографии и отзывы.

## Управление бронированиями

### Создание бронирования

**POST /bookings**

Создает новое бронирование отеля. Требует JWT-токен в заголовке Authorization.

Запрос:
```json
{
    "hotel_id": 1,
    "room_type": "Стандартный",
    "check_in": "2023-12-20T14:00:00",
    "check_out": "2023-12-25T12:00:00",
    "guests": 2,
    "additional_services": ["Трансфер", "Завтрак"]
}
```

### Получение списка бронирований

**GET /bookings**

Возвращает список всех бронирований текущего пользователя. Требует JWT-токен в заголовке Authorization.

### Отмена бронирования

**PUT /bookings/{booking_id}/cancel**

Отменяет существующее бронирование, если до даты заезда осталось более 48 часов. Требует JWT-токен в заголовке Authorization.' with k=3
2025-03-02 20:45:35,298 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 413 Request Entity Too Large"
2025-03-02 20:45:35,299 - semantic_db - ERROR - Error during search: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 615"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 16:45:35 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': 'f38d5e07-94a4-4ed6-bad6-39ed61e7bbeb', 'x-session-id': '76cbddc5-fdf1-4116-a551-358d7578c999', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))
2025-03-02 20:45:35,304 - semantic_db - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\semantic_db.py", line 113, in search
    docs = self.db.similarity_search(query, k=k)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 608, in similarity_search
    docs_and_scores = self.similarity_search_with_score(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 705, in similarity_search_with_score
    query_embedding = self._embedding_function.embed_query(query)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 196, in embed_query
    return self.embed_documents(texts=[text])[0]
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 142, in embed_documents
    for embedding in self._client.embeddings(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 266, in embeddings
    return self._decorator(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 249, in _decorator
    return call()
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 267, in <lambda>
    lambda: post_embeddings.sync(self._client, access_token=self.token, input_=texts, model=model)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\post_embeddings.py", line 34, in sync
    return build_response(response, Embeddings)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\utils.py", line 85, in build_response
    raise ResponseError(response.url, response.status_code, response.content, response.headers)
gigachat.exceptions.ResponseError: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 615"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 16:45:35 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': 'f38d5e07-94a4-4ed6-bad6-39ed61e7bbeb', 'x-session-id': '76cbddc5-fdf1-4116-a551-358d7578c999', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))

2025-03-02 20:45:49,189 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:45:49,210 - aggregator - INFO - Calling analysis evaluator agent
2025-03-02 20:45:49,229 - aggregator - ERROR - Error during aggregation: 2 validation errors for HumanMessage
content.str
  Input should be a valid string [type=string_type, input_value={'requirements_analysis':...втрак"]\n}\'\n```'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
content.list[union[str,dict[any,any]]]
  Input should be a valid list [type=list_type, input_value={'requirements_analysis':...втрак"]\n}\'\n```'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/list_type
2025-03-02 20:45:49,235 - aggregator - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\aggregator.py", line 109, in aggregate
    compliance_result = self.analysis_evaluator_agent.call(
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\agents\analysis_evaluator_agent.py", line 17, in call
    HumanMessage(content=final_report)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\messages\human.py", line 57, in __init__
    super().__init__(content=content, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\messages\base.py", line 76, in __init__
    super().__init__(content=content, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\load\serializable.py", line 125, in __init__
    super().__init__(*args, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 214, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
pydantic_core._pydantic_core.ValidationError: 2 validation errors for HumanMessage
content.str
  Input should be a valid string [type=string_type, input_value={'requirements_analysis':...втрак"]\n}\'\n```'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
content.list[union[str,dict[any,any]]]
  Input should be a valid list [type=list_type, input_value={'requirements_analysis':...втрак"]\n}\'\n```'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/list_type

2025-03-02 20:45:49,237 - analysis-api - ERROR - Error during analysis: 2 validation errors for HumanMessage
content.str
  Input should be a valid string [type=string_type, input_value={'requirements_analysis':...втрак"]\n}\'\n```'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
content.list[union[str,dict[any,any]]]
  Input should be a valid list [type=list_type, input_value={'requirements_analysis':...втрак"]\n}\'\n```'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/list_type
2025-03-02 20:45:49,241 - analysis-api - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\main.py", line 128, in perform_analysis
    final_report, bug_estimation = aggregator.aggregate(
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\aggregator.py", line 109, in aggregate
    compliance_result = self.analysis_evaluator_agent.call(
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\agents\analysis_evaluator_agent.py", line 17, in call
    HumanMessage(content=final_report)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\messages\human.py", line 57, in __init__
    super().__init__(content=content, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\messages\base.py", line 76, in __init__
    super().__init__(content=content, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\load\serializable.py", line 125, in __init__
    super().__init__(*args, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 214, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
pydantic_core._pydantic_core.ValidationError: 2 validation errors for HumanMessage
content.str
  Input should be a valid string [type=string_type, input_value={'requirements_analysis':...втрак"]\n}\'\n```'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
content.list[union[str,dict[any,any]]]
  Input should be a valid list [type=list_type, input_value={'requirements_analysis':...втрак"]\n}\'\n```'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/list_type

2025-03-02 20:45:49,246 - analysis-api - ERROR - Error during analysis: ValidationError: 2 validation errors for HumanMessage
content.str
  Input should be a valid string [type=string_type, input_value={'requirements_analysis':...втрак"]\n}\'\n```'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
content.list[union[str,dict[any,any]]]
  Input should be a valid list [type=list_type, input_value={'requirements_analysis':...втрак"]\n}\'\n```'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/list_type
2025-03-02 20:45:49,247 - analysis-api - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\main.py", line 164, in analyze
    final_report, bug_estimation, aggregator = perform_analysis(
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\main.py", line 128, in perform_analysis
    final_report, bug_estimation = aggregator.aggregate(
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\aggregator.py", line 109, in aggregate
    compliance_result = self.analysis_evaluator_agent.call(
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\agents\analysis_evaluator_agent.py", line 17, in call
    HumanMessage(content=final_report)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\messages\human.py", line 57, in __init__
    super().__init__(content=content, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\messages\base.py", line 76, in __init__
    super().__init__(content=content, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\load\serializable.py", line 125, in __init__
    super().__init__(*args, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 214, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
pydantic_core._pydantic_core.ValidationError: 2 validation errors for HumanMessage
content.str
  Input should be a valid string [type=string_type, input_value={'requirements_analysis':...втрак"]\n}\'\n```'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
content.list[union[str,dict[any,any]]]
  Input should be a valid list [type=list_type, input_value={'requirements_analysis':...втрак"]\n}\'\n```'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/list_type

2025-03-02 20:51:34,114 - analysis-api - INFO - Starting API server
2025-03-02 20:51:36,739 - analysis-api - INFO - Received analysis request
2025-03-02 20:51:36,739 - analysis-api - INFO - Request data sizes: requirements=1174, code=10336, test_cases=6389, documentation=2062, semantic_db=13778
2025-03-02 20:51:36,743 - analysis-api - WARNING - Enhanced features are not available
2025-03-02 20:51:36,743 - analysis-api - INFO - Starting analysis process
2025-03-02 20:51:36,743 - analysis-api - INFO - Using new semantic_db format with 5 services
2025-03-02 20:51:36,743 - analysis-api - INFO - Initializing SemanticDB with 5 documents
2025-03-02 20:51:36,745 - semantic_db - INFO - Initializing SemanticDB
2025-03-02 20:51:37,467 - semantic_db - INFO - Documents provided, type: dict
2025-03-02 20:51:37,467 - semantic_db - INFO - New format detected: dictionary with 5 service descriptions
2025-03-02 20:51:37,467 - semantic_db - INFO - Adding service descriptions for 5 services
2025-03-02 20:51:37,472 - semantic_db - INFO - Split 5 documents into 5 chunks
2025-03-02 20:51:38,315 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 20:51:40,239 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 20:51:40,450 - semantic_db - INFO - Successfully added service descriptions
2025-03-02 20:51:40,450 - analysis-api - INFO - Initializing Aggregator
2025-03-02 20:51:40,450 - aggregator - INFO - Initializing Aggregator
2025-03-02 20:51:40,450 - aggregator - INFO - Semantic DB provided, initializing SemanticAgent
2025-03-02 20:51:40,450 - analysis-api - INFO - Calling aggregator.aggregate method
2025-03-02 20:51:40,450 - aggregator - INFO - Starting aggregation process
2025-03-02 20:51:40,450 - aggregator - INFO - Calling requirements analysis agent
2025-03-02 20:51:40,450 - semantic_db - INFO - Searching for: 'ТРЕБОВАНИЯ:

Требования к системе бронирования отелей (Hotel Booking API):

1. Система должна позволять пользователям регистрироваться и авторизовываться с использованием JWT-токенов.
2. Пользователи должны иметь возможность просматривать список доступных отелей с фильтрацией по городу, датам, количеству гостей и ценовому диапазону.
3. Система должна обеспечивать возможность просмотра детальной информации о выбранном отеле, включая описание, удобства, фотографии и отзывы.
4. Пользователи должны иметь возможность бронировать номера на указанные даты с выбором типа номера и дополнительных услуг.
5. Система должна отправлять подтверждение бронирования на электронную почту пользователя.
6. Пользователи должны иметь возможность просматривать историю своих бронирований и отменять бронирования, если до даты заезда осталось более 48 часов.
7. Система должна интегрироваться с внешними платежными системами для проведения оплаты бронирования.
8. API должно быть защищено от атак типа SQL-инъекций и XSS.
9. Система должна обеспечивать высокую доступность с временем отклика не более 300 мс для 95% запросов.
10. API должно включать документацию в формате OpenAPI/Swagger.' with k=2
2025-03-02 20:51:41,183 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 20:51:41,362 - semantic_db - INFO - Found 2 documents
2025-03-02 20:51:41,363 - requirements_agent - INFO - Требования с контекстом: 2321 символов
2025-03-02 20:51:41,848 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 20:52:24,421 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:52:24,448 - aggregator - INFO - Calling code analysis agent
2025-03-02 20:52:53,266 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:52:53,281 - aggregator - INFO - Calling test cases analysis agent
2025-03-02 20:53:30,471 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:53:30,492 - aggregator - INFO - Calling documentation analysis agent
2025-03-02 20:53:30,492 - semantic_db - INFO - Searching for: 'ДОКУМЕНТАЦИЯ:

# Документация по API системы бронирования отелей

## Обзор

API системы бронирования отелей предоставляет возможности для поиска и бронирования номеров в отелях, а также управления бронированиями. API разработано с использованием RESTful подхода и защищено JWT-аутентификацией.

## Аутентификация

Все запросы к защищенным эндпоинтам должны включать JWT-токен в заголовке Authorization. Для получения токена необходимо зарегистрироваться и войти в систему.

### Регистрация

**POST /register**

Регистрация нового пользователя в системе.

Запрос:
```json
{
    "username": "имя_пользователя",
    "password": "пароль",
    "email": "почта@пример.com"
}
```

### Вход в систему

**POST /login**

Аутентификация пользователя и получение JWT-токена.

Запрос:
```json
{
    "username": "имя_пользователя",
    "password": "пароль"
}
```

Ответ:
```json
{
    "token": "jwt_token"
}
```

## Поиск и просмотр отелей

### Получение списка отелей

**GET /hotels**

Возвращает список отелей с возможностью фильтрации.

Параметры запроса:
- city - город
- min_price - минимальная цена за ночь
- max_price - максимальная цена за ночь
- guests - количество гостей

### Детальная информация об отеле

**GET /hotels/{hotel_id}**

Возвращает подробную информацию об указанном отеле, включая описание, удобства, фотографии и отзывы.

## Управление бронированиями

### Создание бронирования

**POST /bookings**

Создает новое бронирование отеля. Требует JWT-токен в заголовке Authorization.

Запрос:
```json
{
    "hotel_id": 1,
    "room_type": "Стандартный",
    "check_in": "2023-12-20T14:00:00",
    "check_out": "2023-12-25T12:00:00",
    "guests": 2,
    "additional_services": ["Трансфер", "Завтрак"]
}
```

### Получение списка бронирований

**GET /bookings**

Возвращает список всех бронирований текущего пользователя. Требует JWT-токен в заголовке Authorization.

### Отмена бронирования

**PUT /bookings/{booking_id}/cancel**

Отменяет существующее бронирование, если до даты заезда осталось более 48 часов. Требует JWT-токен в заголовке Authorization.' with k=3
2025-03-02 20:53:33,075 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 413 Request Entity Too Large"
2025-03-02 20:53:33,076 - semantic_db - ERROR - Error during search: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 615"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 16:53:32 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': 'e17217ad-ae76-40a3-a887-9c895649ac68', 'x-session-id': '919ea66e-26e5-45ef-a540-6b1953d96b6d', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))
2025-03-02 20:53:33,081 - semantic_db - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\semantic_db.py", line 113, in search
    docs = self.db.similarity_search(query, k=k)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 608, in similarity_search
    docs_and_scores = self.similarity_search_with_score(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 705, in similarity_search_with_score
    query_embedding = self._embedding_function.embed_query(query)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 196, in embed_query
    return self.embed_documents(texts=[text])[0]
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 142, in embed_documents
    for embedding in self._client.embeddings(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 266, in embeddings
    return self._decorator(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 249, in _decorator
    return call()
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 267, in <lambda>
    lambda: post_embeddings.sync(self._client, access_token=self.token, input_=texts, model=model)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\post_embeddings.py", line 34, in sync
    return build_response(response, Embeddings)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\utils.py", line 85, in build_response
    raise ResponseError(response.url, response.status_code, response.content, response.headers)
gigachat.exceptions.ResponseError: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 615"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 16:53:32 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': 'e17217ad-ae76-40a3-a887-9c895649ac68', 'x-session-id': '919ea66e-26e5-45ef-a540-6b1953d96b6d', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))

2025-03-02 20:53:46,731 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:53:47,006 - aggregator - INFO - Calling analysis evaluator agent
2025-03-02 20:54:00,761 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 20:54:00,765 - aggregator - INFO - Calling bug estimator agent
2025-03-02 20:54:00,767 - aggregator - ERROR - Error during aggregation: 2 validation errors for HumanMessage
content.str
  Input should be a valid string [type=string_type, input_value={'requirements_analysis':...ий системы.'}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
content.list[union[str,dict[any,any]]]
  Input should be a valid list [type=list_type, input_value={'requirements_analysis':...ий системы.'}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/list_type
2025-03-02 20:54:00,774 - aggregator - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\aggregator.py", line 121, in aggregate
    bug_estimation = self.bug_estimator_agent.call(
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\agents\base_agent.py", line 19, in call
    HumanMessage(content=input_text)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\messages\human.py", line 57, in __init__
    super().__init__(content=content, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\messages\base.py", line 76, in __init__
    super().__init__(content=content, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\load\serializable.py", line 125, in __init__
    super().__init__(*args, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 214, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
pydantic_core._pydantic_core.ValidationError: 2 validation errors for HumanMessage
content.str
  Input should be a valid string [type=string_type, input_value={'requirements_analysis':...ий системы.'}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
content.list[union[str,dict[any,any]]]
  Input should be a valid list [type=list_type, input_value={'requirements_analysis':...ий системы.'}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/list_type

2025-03-02 20:54:00,776 - analysis-api - ERROR - Error during analysis: 2 validation errors for HumanMessage
content.str
  Input should be a valid string [type=string_type, input_value={'requirements_analysis':...ий системы.'}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
content.list[union[str,dict[any,any]]]
  Input should be a valid list [type=list_type, input_value={'requirements_analysis':...ий системы.'}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/list_type
2025-03-02 20:54:00,779 - analysis-api - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\main.py", line 128, in perform_analysis
    final_report, bug_estimation = aggregator.aggregate(
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\aggregator.py", line 121, in aggregate
    bug_estimation = self.bug_estimator_agent.call(
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\agents\base_agent.py", line 19, in call
    HumanMessage(content=input_text)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\messages\human.py", line 57, in __init__
    super().__init__(content=content, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\messages\base.py", line 76, in __init__
    super().__init__(content=content, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\load\serializable.py", line 125, in __init__
    super().__init__(*args, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 214, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
pydantic_core._pydantic_core.ValidationError: 2 validation errors for HumanMessage
content.str
  Input should be a valid string [type=string_type, input_value={'requirements_analysis':...ий системы.'}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
content.list[union[str,dict[any,any]]]
  Input should be a valid list [type=list_type, input_value={'requirements_analysis':...ий системы.'}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/list_type

2025-03-02 20:54:00,784 - analysis-api - ERROR - Error during analysis: ValidationError: 2 validation errors for HumanMessage
content.str
  Input should be a valid string [type=string_type, input_value={'requirements_analysis':...ий системы.'}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
content.list[union[str,dict[any,any]]]
  Input should be a valid list [type=list_type, input_value={'requirements_analysis':...ий системы.'}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/list_type
2025-03-02 20:54:00,785 - analysis-api - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\main.py", line 164, in analyze
    final_report, bug_estimation, aggregator = perform_analysis(
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\main.py", line 128, in perform_analysis
    final_report, bug_estimation = aggregator.aggregate(
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\aggregator.py", line 121, in aggregate
    bug_estimation = self.bug_estimator_agent.call(
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\agents\base_agent.py", line 19, in call
    HumanMessage(content=input_text)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\messages\human.py", line 57, in __init__
    super().__init__(content=content, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\messages\base.py", line 76, in __init__
    super().__init__(content=content, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\load\serializable.py", line 125, in __init__
    super().__init__(*args, **kwargs)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 214, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
pydantic_core._pydantic_core.ValidationError: 2 validation errors for HumanMessage
content.str
  Input should be a valid string [type=string_type, input_value={'requirements_analysis':...ий системы.'}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
content.list[union[str,dict[any,any]]]
  Input should be a valid list [type=list_type, input_value={'requirements_analysis':...ий системы.'}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/list_type

2025-03-02 21:07:27,926 - analysis-api - INFO - Starting API server
2025-03-02 21:07:32,781 - analysis-api - INFO - Received analysis request
2025-03-02 21:07:32,782 - analysis-api - INFO - Request data sizes: requirements=1174, code=10336, test_cases=6389, documentation=2062, semantic_db=13778
2025-03-02 21:07:32,786 - analysis-api - WARNING - Enhanced features are not available
2025-03-02 21:07:32,787 - analysis-api - INFO - Starting analysis process
2025-03-02 21:07:32,787 - analysis-api - INFO - Using new semantic_db format with 5 services
2025-03-02 21:07:32,787 - analysis-api - INFO - Initializing SemanticDB with 5 documents
2025-03-02 21:07:32,788 - semantic_db - INFO - Initializing SemanticDB
2025-03-02 21:07:33,676 - semantic_db - INFO - Documents provided, type: dict
2025-03-02 21:07:33,677 - semantic_db - INFO - New format detected: dictionary with 5 service descriptions
2025-03-02 21:07:33,678 - semantic_db - INFO - Adding service descriptions for 5 services
2025-03-02 21:07:33,680 - semantic_db - INFO - Split 5 documents into 5 chunks
2025-03-02 21:07:33,861 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 21:07:34,664 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 21:07:34,953 - semantic_db - INFO - Successfully added service descriptions
2025-03-02 21:07:34,955 - analysis-api - INFO - Initializing Aggregator
2025-03-02 21:07:34,956 - aggregator - INFO - Initializing Aggregator
2025-03-02 21:07:34,957 - aggregator - INFO - Semantic DB provided, initializing SemanticAgent
2025-03-02 21:07:34,957 - analysis-api - INFO - Calling aggregator.aggregate method
2025-03-02 21:07:34,958 - aggregator - INFO - Starting aggregation process
2025-03-02 21:07:34,960 - aggregator - INFO - Calling RequirementsAgent
2025-03-02 21:07:34,960 - semantic_db - INFO - Searching for: 'ТРЕБОВАНИЯ:

Требования к системе бронирования отелей (Hotel Booking API):

1. Система должна позволять пользователям регистрироваться и авторизовываться с использованием JWT-токенов.
2. Пользователи должны иметь возможность просматривать список доступных отелей с фильтрацией по городу, датам, количеству гостей и ценовому диапазону.
3. Система должна обеспечивать возможность просмотра детальной информации о выбранном отеле, включая описание, удобства, фотографии и отзывы.
4. Пользователи должны иметь возможность бронировать номера на указанные даты с выбором типа номера и дополнительных услуг.
5. Система должна отправлять подтверждение бронирования на электронную почту пользователя.
6. Пользователи должны иметь возможность просматривать историю своих бронирований и отменять бронирования, если до даты заезда осталось более 48 часов.
7. Система должна интегрироваться с внешними платежными системами для проведения оплаты бронирования.
8. API должно быть защищено от атак типа SQL-инъекций и XSS.
9. Система должна обеспечивать высокую доступность с временем отклика не более 300 мс для 95% запросов.
10. API должно включать документацию в формате OpenAPI/Swagger.' with k=2
2025-03-02 21:07:35,597 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 21:07:35,810 - semantic_db - INFO - Found 2 documents
2025-03-02 21:07:35,811 - requirements_agent - INFO - Требования с контекстом: 2321 символов
2025-03-02 21:07:35,944 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 21:08:10,267 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:08:10,286 - aggregator - INFO - RequirementsAgent completed successfully
2025-03-02 21:08:10,286 - aggregator - INFO - Calling CodeAgent
2025-03-02 21:08:37,620 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:08:37,648 - aggregator - INFO - CodeAgent completed successfully
2025-03-02 21:08:37,648 - aggregator - INFO - Calling TestCasesAgent
2025-03-02 21:09:12,063 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:09:12,081 - aggregator - INFO - TestCasesAgent completed successfully
2025-03-02 21:09:12,081 - aggregator - INFO - Calling DocumentationAgent
2025-03-02 21:09:12,082 - semantic_db - INFO - Searching for: 'ДОКУМЕНТАЦИЯ:

# Документация по API системы бронирования отелей

## Обзор

API системы бронирования отелей предоставляет возможности для поиска и бронирования номеров в отелях, а также управления бронированиями. API разработано с использованием RESTful подхода и защищено JWT-аутентификацией.

## Аутентификация

Все запросы к защищенным эндпоинтам должны включать JWT-токен в заголовке Authorization. Для получения токена необходимо зарегистрироваться и войти в систему.

### Регистрация

**POST /register**

Регистрация нового пользователя в системе.

Запрос:
```json
{
    "username": "имя_пользователя",
    "password": "пароль",
    "email": "почта@пример.com"
}
```

### Вход в систему

**POST /login**

Аутентификация пользователя и получение JWT-токена.

Запрос:
```json
{
    "username": "имя_пользователя",
    "password": "пароль"
}
```

Ответ:
```json
{
    "token": "jwt_token"
}
```

## Поиск и просмотр отелей

### Получение списка отелей

**GET /hotels**

Возвращает список отелей с возможностью фильтрации.

Параметры запроса:
- city - город
- min_price - минимальная цена за ночь
- max_price - максимальная цена за ночь
- guests - количество гостей

### Детальная информация об отеле

**GET /hotels/{hotel_id}**

Возвращает подробную информацию об указанном отеле, включая описание, удобства, фотографии и отзывы.

## Управление бронированиями

### Создание бронирования

**POST /bookings**

Создает новое бронирование отеля. Требует JWT-токен в заголовке Authorization.

Запрос:
```json
{
    "hotel_id": 1,
    "room_type": "Стандартный",
    "check_in": "2023-12-20T14:00:00",
    "check_out": "2023-12-25T12:00:00",
    "guests": 2,
    "additional_services": ["Трансфер", "Завтрак"]
}
```

### Получение списка бронирований

**GET /bookings**

Возвращает список всех бронирований текущего пользователя. Требует JWT-токен в заголовке Authorization.

### Отмена бронирования

**PUT /bookings/{booking_id}/cancel**

Отменяет существующее бронирование, если до даты заезда осталось более 48 часов. Требует JWT-токен в заголовке Authorization.' with k=3
2025-03-02 21:09:12,299 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 413 Request Entity Too Large"
2025-03-02 21:09:12,300 - semantic_db - ERROR - Error during search: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 615"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 17:09:12 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': '7078c0fa-f158-478d-b408-4da0b080fa53', 'x-session-id': '2cf52f72-3c80-4c39-b626-94896dc29a28', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))
2025-03-02 21:09:12,305 - semantic_db - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\semantic_db.py", line 113, in search
    docs = self.db.similarity_search(query, k=k)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 608, in similarity_search
    docs_and_scores = self.similarity_search_with_score(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 705, in similarity_search_with_score
    query_embedding = self._embedding_function.embed_query(query)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 196, in embed_query
    return self.embed_documents(texts=[text])[0]
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 142, in embed_documents
    for embedding in self._client.embeddings(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 266, in embeddings
    return self._decorator(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 249, in _decorator
    return call()
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 267, in <lambda>
    lambda: post_embeddings.sync(self._client, access_token=self.token, input_=texts, model=model)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\post_embeddings.py", line 34, in sync
    return build_response(response, Embeddings)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\utils.py", line 85, in build_response
    raise ResponseError(response.url, response.status_code, response.content, response.headers)
gigachat.exceptions.ResponseError: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 615"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 17:09:12 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': '7078c0fa-f158-478d-b408-4da0b080fa53', 'x-session-id': '2cf52f72-3c80-4c39-b626-94896dc29a28', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))

2025-03-02 21:09:24,933 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:09:24,935 - aggregator - INFO - DocumentationAgent completed successfully
2025-03-02 21:09:24,935 - aggregator - INFO - Evaluating compliance
2025-03-02 21:09:30,596 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:09:30,597 - aggregator - INFO - Compliance evaluation completed successfully
2025-03-02 21:09:30,598 - aggregator - INFO - Estimating potential bugs
2025-03-02 21:09:47,624 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:09:47,645 - aggregator - INFO - Bug estimation completed successfully
2025-03-02 21:09:47,646 - aggregator - INFO - Generating final report
2025-03-02 21:10:40,963 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:10:40,992 - langchain_gigachat.chat_models.gigachat - WARNING - Giga generation stopped with reason: length
2025-03-02 21:10:40,993 - aggregator - INFO - Final report generated successfully
2025-03-02 21:10:40,995 - analysis-api - INFO - Analysis completed successfully
2025-03-02 21:10:40,996 - analysis-api - INFO - Returning successful response
2025-03-02 21:23:36,240 - analysis-api - INFO - Starting API server
2025-03-02 21:23:43,712 - analysis-api - INFO - Starting API server
2025-03-02 21:24:01,859 - analysis-api - INFO - Starting API server
2025-03-02 21:24:04,549 - analysis-api - INFO - Received analysis request
2025-03-02 21:24:04,550 - analysis-api - INFO - Request data sizes: requirements=1174, code=10336, test_cases=6389, documentation=2062, semantic_db=13778
2025-03-02 21:24:04,553 - analysis-api - WARNING - Enhanced features are not available
2025-03-02 21:24:04,553 - analysis-api - INFO - Starting analysis process
2025-03-02 21:24:04,554 - analysis-api - INFO - Using new semantic_db format with 5 services
2025-03-02 21:24:04,554 - analysis-api - INFO - Initializing SemanticDB with 5 documents
2025-03-02 21:24:04,554 - semantic_db - INFO - Initializing SemanticDB
2025-03-02 21:24:05,269 - semantic_db - INFO - Documents provided, type: dict
2025-03-02 21:24:05,270 - semantic_db - INFO - New format detected: dictionary with 5 service descriptions
2025-03-02 21:24:05,270 - semantic_db - INFO - Adding service descriptions for 5 services
2025-03-02 21:24:05,271 - semantic_db - INFO - Split 5 documents into 5 chunks
2025-03-02 21:24:05,482 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 21:24:06,293 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 21:24:06,585 - semantic_db - INFO - Successfully added service descriptions
2025-03-02 21:24:06,586 - analysis-api - INFO - Initializing Aggregator
2025-03-02 21:24:06,586 - aggregator - INFO - Initializing Aggregator
2025-03-02 21:24:06,587 - aggregator - INFO - Semantic DB provided, initializing SemanticAgent
2025-03-02 21:24:06,587 - analysis-api - INFO - Calling aggregator.aggregate method
2025-03-02 21:24:06,588 - aggregator - INFO - Starting aggregation process
2025-03-02 21:24:06,590 - aggregator - INFO - Calling RequirementsAgent
2025-03-02 21:24:06,590 - semantic_db - INFO - Searching for: 'ТРЕБОВАНИЯ:

Требования к системе бронирования отелей (Hotel Booking API):

1. Система должна позволять пользователям регистрироваться и авторизовываться с использованием JWT-токенов.
2. Пользователи должны иметь возможность просматривать список доступных отелей с фильтрацией по городу, датам, количеству гостей и ценовому диапазону.
3. Система должна обеспечивать возможность просмотра детальной информации о выбранном отеле, включая описание, удобства, фотографии и отзывы.
4. Пользователи должны иметь возможность бронировать номера на указанные даты с выбором типа номера и дополнительных услуг.
5. Система должна отправлять подтверждение бронирования на электронную почту пользователя.
6. Пользователи должны иметь возможность просматривать историю своих бронирований и отменять бронирования, если до даты заезда осталось более 48 часов.
7. Система должна интегрироваться с внешними платежными системами для проведения оплаты бронирования.
8. API должно быть защищено от атак типа SQL-инъекций и XSS.
9. Система должна обеспечивать высокую доступность с временем отклика не более 300 мс для 95% запросов.
10. API должно включать документацию в формате OpenAPI/Swagger.' with k=2
2025-03-02 21:24:07,236 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 200 OK"
2025-03-02 21:24:07,427 - semantic_db - INFO - Found 2 documents
2025-03-02 21:24:07,427 - requirements_agent - INFO - Требования с контекстом: 2321 символов
2025-03-02 21:24:07,592 - httpx - INFO - HTTP Request: POST https://ngw.devices.sberbank.ru:9443/api/v2/oauth "HTTP/1.1 200 OK"
2025-03-02 21:24:43,812 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:24:43,858 - aggregator - INFO - RequirementsAgent completed successfully
2025-03-02 21:24:43,859 - aggregator - INFO - Calling CodeAgent
2025-03-02 21:25:10,356 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:25:10,377 - aggregator - INFO - CodeAgent completed successfully
2025-03-02 21:25:10,377 - aggregator - INFO - Calling TestCasesAgent
2025-03-02 21:25:42,851 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:25:42,880 - aggregator - INFO - TestCasesAgent completed successfully
2025-03-02 21:25:42,881 - aggregator - INFO - Calling DocumentationAgent
2025-03-02 21:25:42,882 - semantic_db - INFO - Searching for: 'ДОКУМЕНТАЦИЯ:

# Документация по API системы бронирования отелей

## Обзор

API системы бронирования отелей предоставляет возможности для поиска и бронирования номеров в отелях, а также управления бронированиями. API разработано с использованием RESTful подхода и защищено JWT-аутентификацией.

## Аутентификация

Все запросы к защищенным эндпоинтам должны включать JWT-токен в заголовке Authorization. Для получения токена необходимо зарегистрироваться и войти в систему.

### Регистрация

**POST /register**

Регистрация нового пользователя в системе.

Запрос:
```json
{
    "username": "имя_пользователя",
    "password": "пароль",
    "email": "почта@пример.com"
}
```

### Вход в систему

**POST /login**

Аутентификация пользователя и получение JWT-токена.

Запрос:
```json
{
    "username": "имя_пользователя",
    "password": "пароль"
}
```

Ответ:
```json
{
    "token": "jwt_token"
}
```

## Поиск и просмотр отелей

### Получение списка отелей

**GET /hotels**

Возвращает список отелей с возможностью фильтрации.

Параметры запроса:
- city - город
- min_price - минимальная цена за ночь
- max_price - максимальная цена за ночь
- guests - количество гостей

### Детальная информация об отеле

**GET /hotels/{hotel_id}**

Возвращает подробную информацию об указанном отеле, включая описание, удобства, фотографии и отзывы.

## Управление бронированиями

### Создание бронирования

**POST /bookings**

Создает новое бронирование отеля. Требует JWT-токен в заголовке Authorization.

Запрос:
```json
{
    "hotel_id": 1,
    "room_type": "Стандартный",
    "check_in": "2023-12-20T14:00:00",
    "check_out": "2023-12-25T12:00:00",
    "guests": 2,
    "additional_services": ["Трансфер", "Завтрак"]
}
```

### Получение списка бронирований

**GET /bookings**

Возвращает список всех бронирований текущего пользователя. Требует JWT-токен в заголовке Authorization.

### Отмена бронирования

**PUT /bookings/{booking_id}/cancel**

Отменяет существующее бронирование, если до даты заезда осталось более 48 часов. Требует JWT-токен в заголовке Authorization.' with k=3
2025-03-02 21:25:43,180 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/embeddings "HTTP/1.1 413 Request Entity Too Large"
2025-03-02 21:25:43,182 - semantic_db - ERROR - Error during search: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 615"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 17:25:43 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': '6a61bac5-3e43-4d53-9667-006bb404074a', 'x-session-id': 'cbd7d638-491c-4050-8b5a-7d34f5c0d012', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))
2025-03-02 21:25:43,186 - semantic_db - ERROR - Traceback (most recent call last):
  File "C:\Users\SaltyFrappuccino\repos\nowaythisshitisrealwtf\semantic_db.py", line 113, in search
    docs = self.db.similarity_search(query, k=k)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 608, in similarity_search
    docs_and_scores = self.similarity_search_with_score(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_chroma\vectorstores.py", line 705, in similarity_search_with_score
    query_embedding = self._embedding_function.embed_query(query)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 196, in embed_query
    return self.embed_documents(texts=[text])[0]
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_gigachat\embeddings\gigachat.py", line 142, in embed_documents
    for embedding in self._client.embeddings(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 266, in embeddings
    return self._decorator(
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 249, in _decorator
    return call()
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\client.py", line 267, in <lambda>
    lambda: post_embeddings.sync(self._client, access_token=self.token, input_=texts, model=model)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\post_embeddings.py", line 34, in sync
    return build_response(response, Embeddings)
  File "C:\Users\SaltyFrappuccino\AppData\Local\Programs\Python\Python39\lib\site-packages\gigachat\api\utils.py", line 85, in build_response
    raise ResponseError(response.url, response.status_code, response.content, response.headers)
gigachat.exceptions.ResponseError: (URL('https://gigachat.devices.sberbank.ru/api/v1/embeddings'), 413, b'{"status":413,"message":"Max tokens for index 0 exceeded. Max tokens: 512, recieved tokens: 615"}\n', Headers({'server': 'SynGX', 'date': 'Sun, 02 Mar 2025 17:25:43 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '98', 'connection': 'keep-alive', 'access-control-allow-credentials': 'true', 'access-control-allow-headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'access-control-allow-methods': 'GET, POST, DELETE, OPTIONS', 'access-control-allow-origin': 'https://beta.saluteai.sberdevices.ru', 'x-request-id': '6a61bac5-3e43-4d53-9667-006bb404074a', 'x-session-id': 'cbd7d638-491c-4050-8b5a-7d34f5c0d012', 'allow': 'GET, POST', 'strict-transport-security': 'max-age=31536000; includeSubDomains'}))

2025-03-02 21:25:56,729 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:25:56,731 - aggregator - INFO - DocumentationAgent completed successfully
2025-03-02 21:25:56,732 - aggregator - INFO - Evaluating compliance
2025-03-02 21:26:02,569 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:26:02,571 - aggregator - INFO - Compliance evaluation completed successfully
2025-03-02 21:26:02,571 - aggregator - INFO - Estimating potential bugs
2025-03-02 21:26:12,283 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:26:12,287 - aggregator - INFO - Bug estimation completed successfully
2025-03-02 21:26:12,288 - aggregator - INFO - Generating final report
2025-03-02 21:26:15,462 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:26:19,391 - httpx - INFO - HTTP Request: POST https://gigachat.devices.sberbank.ru/api/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-02 21:26:19,407 - aggregator - INFO - Final report generated successfully
2025-03-02 21:26:19,410 - analysis-api - INFO - Analysis completed successfully
2025-03-02 21:26:19,411 - analysis-api - INFO - Returning successful response
