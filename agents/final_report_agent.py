# agents/final_report_agent.py
from langchain_core.messages import HumanMessage, SystemMessage
from config import llm


class FinalReportAgent:
    def __init__(self):
        self.system_prompt = """
        Ты эксперт-аналитик по оценке качества программного обеспечения с глубоким пониманием веб-приложений,
        REST API и современных архитектур бэкенд-систем. Твоя задача - провести детальный объективный 
        анализ соответствия кода требованиям на основе предоставленных данных.
        
        На вход ты получишь:
        1. Анализ требований (структурированный перечень функциональных и нефункциональных требований)
        2. Анализ кода (инвентаризация реализованной функциональности)
        3. Анализ тест-кейсов (какие аспекты покрывают тесты)
        4. Анализ документации (если предоставлена)
        5. Результаты проверки соответствия (метрики и объяснения)
        6. Оценку потенциальных багов (количество и объяснения)
        7. Детализированную информацию по каждому багу (если есть)
        8. Метрики соответствия (процентные соотношения)
        
        Твоя задача:
        1. Сопоставить все требования с реализацией в коде и тестами, понимая что:
           - REST API эндпоинты считаются полноценной реализацией функциональности
           - Middleware для JWT-аутентификации считается полноценной реализацией требований по безопасности
           - Pytest и аналогичные тесты API считаются полноценным покрытием тестами
           
        2. Для каждого требования определить статус:
           - "Полностью реализовано" - есть код и тесты, полностью отвечающие требованию
           - "Частично реализовано" - есть код, но реализация неполная или недостаточно тестов
           - "Не реализовано" - отсутствие кода или тестов для реализации требования
           
        3. Для каждого несоответствия указать:
           - Конкретное требование с его ID
           - Тип проблемы (нет кода, нет теста, несоответствие)
           - Детальное объяснение проблемы
           - Предложение по исправлению, если возможно
        
        4. Подробно проанализировать выявленные баги и несоответствия:
           - Для каждого бага указать его причину, серьезность и влияние
           - Предложить конкретные шаги по устранению
           - Оценить потенциальное влияние на систему
           - Приоритезировать исправления
        
        5. Дать общую оценку качества кода:
           - Соответствие современным практикам
           - Архитектурная целостность
           - Возможные узкие места и риски
           - Рекомендации по улучшению
        
        6. Проанализировать метрики соответствия:
           - Детально пояснить, почему код соответствует/не соответствует требованиям в конкретном процентном соотношении
           - Детально пояснить, почему тесты соответствуют/не соответствуют требованиям в конкретном процентном соотношении
           - Детально пояснить, почему код соответствует/не соответствует тестам в конкретном процентном соотношении
        
        Формат вывода:
        
        # Итоговый отчет об анализе соответствия кода требованиям
        
        ## Сводка соответствия
        
        [Общий комментарий о состоянии проекта, основные выводы и метрики]
        
        ### Метрики соответствия
        
        **Соответствие кода требованиям**: [процент]%
        - [Подробное объяснение, почему именно такой процент]
        
        **Соответствие тестов требованиям**: [процент]%
        - [Подробное объяснение, почему именно такой процент]
        
        **Соответствие кода тестам**: [процент]%
        - [Подробное объяснение, почему именно такой процент]
        
        ## Анализ требований
        
        [Общая характеристика требований: количество, распределение по типам, приоритеты]
        
        [Для каждого требования]:
        
        ### REQ-X: [Название требования]
        
        **Статус**: [Полностью реализовано/Частично реализовано/Не реализовано]
        
        **Тип требования**: [Функциональное/Нефункциональное/Безопасность/Интеграционное]
        
        **Приоритет**: [Критический/Высокий/Средний/Низкий]
        
        **Описание требования**: [Краткое описание]
        
        **Реализация в коде**: [API эндпоинты или другие компоненты, реализующие требование]
        
        **Тестовое покрытие**: [Описание тестов, проверяющих требование]
        
        **Рекомендации**: [Если есть проблемы - что нужно исправить]
        
        ## Анализ кода
        
        [Общая характеристика кода: архитектура, основные компоненты, паттерны]
        
        [Детальный разбор основных модулей и их соответствие требованиям]
        
        [Выявленные сильные и слабые стороны кода]
        
        ## Анализ тестового покрытия
        
        [Общая характеристика тестов: типы, охват, качество]
        
        [Детальный разбор тестового покрытия по компонентам]
        
        [Выявленные пробелы в тестировании]
        
        ## Анализ документации
        
        [Оценка полноты и качества документации]
        
        [Соответствие документации коду]
        
        [Рекомендации по улучшению документации]
        
        ## Выявленные баги и несоответствия
        
        **Общее количество багов**: [число]
        
        [Если багов нет, указать причины отсутствия багов]
        
        [Для каждого бага, если они есть]:
        
        ### Баг #[номер]: [Краткое описание]
        
        **Серьезность**: [Критическая/Высокая/Средняя/Низкая]
        
        **Затронутые требования**: [Список REQ-ID]
        
        **Местоположение в коде**: [Файл, функция, строка]
        
        **Описание проблемы**: [Детальное описание]
        
        **Причина возникновения**: [Анализ причин]
        
        **Влияние на систему**: [Как влияет на работу]
        
        **Рекомендации по исправлению**: [Конкретные шаги]
        
        ## Рекомендации по улучшению
        
        [Приоритезированный список рекомендаций по улучшению кода, тестов и документации]
        
        [Оценка сложности и потенциального эффекта от внедрения рекомендаций]
        
        ## Заключение
        
        [Итоговая оценка соответствия требованиям]
        
        [Общее резюме о качестве кода и потенциальных рисках]
        
        [Рекомендации по дальнейшему развитию проекта]
        
        ВАЖНЕЙШИЕ ПРИНЦИПЫ:
        1. Будь максимально точным и объективным в оценке. Если REST API полностью реализует требование - это 100% реализация.
        2. Не игнорируй существующую реализацию. Тщательно изучи код и тесты, чтобы корректно определить соответствие.
        3. Явно указывай, какие эндпоинты API реализуют какие требования, чтобы обосновать твою оценку.
        4. Если Flask/FastAPI приложение реализует JWT-аутентификацию, считай это полным соответствием требованию по безопасности.
        5. Помни, что REST API методы POST, GET, PUT, DELETE для работы с ресурсами являются стандартной
           реализацией CRUD-операций и полностью покрывают соответствующие требования.
        6. Будь максимально детальным в анализе метрик соответствия и объяснениях численных показателей.
        7. Уделяй особое внимание выявленным багам и несоответствиям, предоставляя конкретные шаги по их устранению.
        """

    def call(self, agent_data: dict) -> str:
        """
        Создает итоговый отчет, комбинируя прямое использование структурированных данных из agent_data
        с генерацией текста через LLM для более аналитических частей.
        """
        # Импортируем llm для использования в генерации частей отчета
        from config import llm
        from langchain_core.messages import HumanMessage, SystemMessage
        import json
        import os
        import logging
        
        logger = logging.getLogger("final_report_agent")
        
        try:
            # Инициализируем итоговый отчет
            final_report = "# Итоговый отчет об анализе соответствия кода требованиям\n\n"
            
            # Получаем основные компоненты данных
            requirements_analysis = agent_data.get("requirements_analysis", "")
            code_analysis = agent_data.get("code_analysis", "")
            test_cases_analysis = agent_data.get("test_cases_analysis", "")
            documentation_analysis = agent_data.get("documentation_analysis", "")
            
            # Получаем данные метрик соответствия
            compliance_result = agent_data.get('compliance_result', {})
            code_to_requirements = compliance_result.get('code_to_requirements_percentage', 0)
            tests_to_requirements = compliance_result.get('tests_to_requirements_percentage', 0)
            code_to_tests = compliance_result.get('code_to_tests_percentage', 0)
            
            # Получаем объяснения метрик
            code_to_req_explanation = compliance_result.get('code_to_requirements_explanation', '')
            tests_to_req_explanation = compliance_result.get('tests_to_requirements_explanation', '')
            code_to_tests_explanation = compliance_result.get('code_to_tests_explanation', '')
            
            # Получаем данные о багах
            bug_estimation = agent_data.get('bug_estimation', {})
            bug_count = bug_estimation.get('bug_count', 0)
            bug_explanations = bug_estimation.get('explanations', '')
            detailed_bugs = bug_estimation.get('detailed_bugs', [])
            
            # ЧАСТЬ 1: Сводка соответствия - генерируем через LLM
            svodka_prompt = f"""
            На основе следующих метрик соответствия предоставь краткую сводку о состоянии проекта (не более 3 абзацев):
            
            - Соответствие кода требованиям: {code_to_requirements}%
            - Соответствие тестов требованиям: {tests_to_requirements}%
            - Соответствие кода тестам: {code_to_tests}%
            - Количество багов: {bug_count}
            """
            
            messages = [
                SystemMessage(content="Ты эксперт-аналитик. Создай краткую объективную сводку на основе метрик."),
                HumanMessage(content=svodka_prompt)
            ]
            
            svodka_response = llm.invoke(messages)
            
            final_report += f"## Сводка соответствия\n\n{svodka_response.content.strip()}\n\n"
            
            # ЧАСТЬ 2: Метрики соответствия - добавляем напрямую из данных
            final_report += "### Метрики соответствия\n\n"
            final_report += f"**Соответствие кода требованиям**: {code_to_requirements}%\n"
            final_report += f"- {code_to_req_explanation}\n\n"
            final_report += f"**Соответствие тестов требованиям**: {tests_to_requirements}%\n"
            final_report += f"- {tests_to_req_explanation}\n\n"
            final_report += f"**Соответствие кода тестам**: {code_to_tests}%\n"
            final_report += f"- {code_to_tests_explanation}\n\n"
            
            # ЧАСТЬ 3: Анализ требований - добавляем напрямую
            final_report += "## Анализ требований\n\n"
            
            # Извлекаем только секцию "Детализированные требования" из полного анализа требований
            req_section_start = requirements_analysis.find("## Детализированные требования")
            if req_section_start != -1:
                # Ищем следующую секцию после "Детализированные требования"
                next_section = requirements_analysis.find("##", req_section_start + 10)
                if next_section != -1:
                    req_details = requirements_analysis[req_section_start:next_section].strip()
                else:
                    req_details = requirements_analysis[req_section_start:].strip()
                
                final_report += req_details + "\n\n"
            else:
                # Если структурированный раздел не найден, добавляем все требования
                final_report += requirements_analysis + "\n\n"
            
            # ЧАСТЬ 4: Анализ кода - добавляем напрямую
            final_report += "## Анализ кода\n\n"
            final_report += code_analysis + "\n\n"
            
            # ЧАСТЬ 5: Анализ тестов - добавляем напрямую
            final_report += "## Анализ тестового покрытия\n\n"
            final_report += test_cases_analysis + "\n\n"
            
            # ЧАСТЬ 6: Анализ документации - если есть
            if documentation_analysis.strip() and "документация не предоставлена" not in documentation_analysis.lower():
                final_report += "## Анализ документации\n\n"
                final_report += documentation_analysis + "\n\n"
            
            # ЧАСТЬ 7: Баги и несоответствия - форматируем из структурированных данных
            final_report += "## Выявленные баги и несоответствия\n\n"
            final_report += f"**Общее количество багов**: {bug_count}\n\n"
            
            if bug_count == 0:
                if "не обнаружено несоответствий" in bug_explanations.lower():
                    final_report += "В представленном коде не обнаружено несоответствий требованиям. "
                    final_report += "Код корректно реализует все указанные функциональные требования.\n\n"
                else:
                    final_report += bug_explanations + "\n\n"
            else:
                # Детальное описание багов
                for i, bug in enumerate(detailed_bugs, 1):
                    final_report += f"### Баг #{i}\n\n"
                    
                    # Добавляем все доступные поля для каждого бага
                    if 'описание' in bug:
                        final_report += f"**Описание**: {bug.get('описание', '')}\n\n"
                    
                    if 'серьезность' in bug:
                        final_report += f"**Серьезность**: {bug.get('серьезность', '')}\n\n"
                    
                    if 'где в коде' in bug:
                        final_report += f"**Местоположение в коде**: {bug.get('где в коде', '')}\n\n"
                    
                    if 'причина' in bug:
                        final_report += f"**Причина возникновения**: {bug.get('причина', '')}\n\n"
                    
                    if 'влияние' in bug:
                        final_report += f"**Влияние на систему**: {bug.get('влияние', '')}\n\n"
                    
                    if 'рекомендации' in bug:
                        final_report += f"**Рекомендации по исправлению**: {bug.get('рекомендации', '')}\n\n"
            
            # ЧАСТЬ 8: Заключение - генерируем через LLM с учетом всех предыдущих данных
            conclusion_prompt = f"""
            На основе следующих метрик:
            - Соответствие кода требованиям: {code_to_requirements}%
            - Соответствие тестов требованиям: {tests_to_requirements}%
            - Соответствие кода тестам: {code_to_tests}%
            - Количество багов: {bug_count}
            
            Создай краткое заключение (не более 3 абзацев), содержащее:
            1. Итоговую оценку соответствия требованиям
            2. Общее резюме о качестве кода и потенциальных рисках
            3. Рекомендации по дальнейшему развитию проекта
            """
            
            messages = [
                SystemMessage(content="Ты эксперт-аналитик. Создай краткое объективное заключение на основе метрик."),
                HumanMessage(content=conclusion_prompt)
            ]
            
            conclusion_response = llm.invoke(messages)
            
            final_report += "## Заключение\n\n"
            final_report += conclusion_response.content.strip() + "\n\n"
            
            # Дополнительно сохраняем структурированные данные
            try:
                # Сохраняем структурированные данные для дальнейшего использования
                os.makedirs("output", exist_ok=True)
                with open("output/report_data.json", 'w', encoding='utf-8') as f:
                    json.dump({
                        "metrics": {
                            "code_to_requirements": code_to_requirements,
                            "tests_to_requirements": tests_to_requirements,
                            "code_to_tests": code_to_tests,
                            "bug_count": bug_count
                        },
                        "bug_details": detailed_bugs
                    }, f, ensure_ascii=False, indent=2)
            except Exception as e:
                logger.error(f"Ошибка при сохранении данных отчета: {str(e)}")
            
            return final_report
            
        except Exception as e:
            logger.error(f"Ошибка при формировании отчета: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            
            # Возвращаем базовый отчет с информацией об ошибке
            return f"""
            # Итоговый отчет об анализе соответствия кода требованиям
            
            ## Ошибка при формировании отчета
            
            При формировании итогового отчета произошла ошибка: {str(e)}
            
            ### Доступные данные:
            
            - Требования: {"Есть данные" if requirements_analysis else "Нет данных"}
            - Код: {"Есть данные" if code_analysis else "Нет данных"}
            - Тесты: {"Есть данные" if test_cases_analysis else "Нет данных"}
            - Документация: {"Есть данные" if documentation_analysis else "Нет данных"}
            - Метрики соответствия: {"Есть данные" if compliance_result else "Нет данных"}
            - Оценка багов: {"Есть данные" if bug_estimation else "Нет данных"}
            """
