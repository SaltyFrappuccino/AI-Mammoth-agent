#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
–±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API.
"""

import os
import sys
import argparse
import logging
import json
import uuid
import time
from pathlib import Path
from typing import List, Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('analyze.log')
    ]
)
logger = logging.getLogger("analyze-cli")

def ensure_directories():
    """–°–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    dirs = ["output", "output/visualizations", "output/reports"]
    for d in dirs:
        os.makedirs(d, exist_ok=True)

def check_files_exist(requirements_path: str, code_path: str, tests_path: Optional[str] = None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    files_to_check = [
        (requirements_path, "–§–∞–π–ª —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏"), 
        (code_path, "–§–∞–π–ª —Å –∫–æ–¥–æ–º")
    ]
    
    if tests_path:
        files_to_check.append((tests_path, "–§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏"))
    
    for file_path, file_desc in files_to_check:
        if not os.path.exists(file_path):
            logger.error(f"{file_desc} –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return False
    
    return True

def perform_analysis(
    requirements_path: str, 
    code_path: str, 
    tests_path: Optional[str] = None,
    analyze_security: bool = False
):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    
    Args:
        requirements_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
        code_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–æ–¥–æ–º
        tests_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç–µ—Å—Ç–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        analyze_security: –í—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        try:
            from aggregator import Aggregator
            from semantic_db import SemanticDB
        except ImportError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏: {e}")
            sys.exit(1)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ç—á–µ—Ç–∞
        report_id = str(uuid.uuid4())
        output_dir = Path(f"output/reports/{report_id}")
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
        with open(requirements_path, 'r', encoding='utf-8') as f:
            requirements_content = f.read()
        
        with open(code_path, 'r', encoding='utf-8') as f:
            code_content = f.read()
        
        tests_content = None
        if tests_path:
            with open(tests_path, 'r', encoding='utf-8') as f:
                tests_content = f.read()
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        db = SemanticDB()
        
        logger.info("–ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        aggregator = Aggregator(db=db)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        start_time = time.time()
        report, bugs_count = aggregator.aggregate(
            requirements=requirements_content,
            code=code_content,
            tests=tests_content,
            analyze_security=analyze_security
        )
        
        analysis_time = time.time() - start_time
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –†–∞—Å—à–∏—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è CLI
        result = {
            "report_id": report_id,
            "analysis_time": f"{analysis_time:.2f} —Å–µ–∫",
            "report": report,
            "bugs_count": bugs_count
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
        try:
            import visualization
            viz_files = list(Path(f"output/visualizations/{report_id}").glob("*.png"))
            if viz_files:
                logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(viz_files)} –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π")
                result["visualizations"] = [str(f) for f in viz_files]
        except ImportError:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ JSON
        report_path = output_dir / "report.json"
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}", exc_info=True)
        return {
            "error": str(e),
            "status": "failed"
        }

def display_report_summary(report: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞"""
    
    if "error" in report:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ê–ù–ê–õ–ò–ó–ï:")
        print(f"  {report['error']}")
        return
    
    print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {report['analysis_time']}")
    print(f"ID –æ—Ç—á–µ—Ç–∞: {report['report_id']}")
    print(f"–†–∞—Å—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {report['bugs_count']}")
    
    # –ü–µ—á–∞—Ç—å —Å–≤–æ–¥–∫–∏ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    if "requirements_analysis" in report["report"]:
        reqs = report["report"]["requirements_analysis"]
        total = len(reqs)
        fulfilled = sum(1 for r in reqs if r.get("status") == "fulfilled")
        partially = sum(1 for r in reqs if r.get("status") == "partially_fulfilled")
        not_fulfilled = sum(1 for r in reqs if r.get("status") == "not_fulfilled")
        
        print("\nüìã –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú:")
        print(f"  –í—Å–µ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {total}")
        print(f"  ‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é: {fulfilled} ({fulfilled/total*100:.1f}%)")
        print(f"  ‚ö† –í—ã–ø–æ–ª–Ω–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ: {partially} ({partially/total*100:.1f}%)")
        print(f"  ‚úó –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {not_fulfilled} ({not_fulfilled/total*100:.1f}%)")
    
    # –ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
    if "recommendations" in report["report"]:
        recs = report["report"]["recommendations"]
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ({len(recs)}):")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
        has_priorities = any("priority" in r for r in recs)
        
        for idx, rec in enumerate(recs[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            priority_str = ""
            if has_priorities and "priority" in rec:
                if rec["priority"] == "high":
                    priority_str = "üî¥ "
                elif rec["priority"] == "medium":
                    priority_str = "üü° "
                else:
                    priority_str = "üü¢ "
            
            print(f"  {priority_str}{idx}. {rec.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
        
        if len(recs) > 5:
            print(f"  ... –∏ –µ—â–µ {len(recs) - 5} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    # –ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è—Ö
    if "visualizations" in report:
        viz_files = report["visualizations"]
        print(f"\nüìä –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò ({len(viz_files)}):")
        for viz_file in viz_files:
            print(f"  ‚Ä¢ {viz_file}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if "security_vulnerabilities" in report["report"]:
        vulns = report["report"]["security_vulnerabilities"]
        print(f"\nüîí –£–Ø–ó–í–ò–ú–û–°–¢–ò ({len(vulns)}):")
        for idx, vuln in enumerate(vulns[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            severity = vuln.get("severity", "medium")
            severity_icon = "üî¥" if severity == "high" else "üü°" if severity == "medium" else "üü¢"
            print(f"  {severity_icon} {vuln.get('type', '–£—è–∑–≤–∏–º–æ—Å—Ç—å')}: {vuln.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
        
        if len(vulns) > 3:
            print(f"  ... –∏ –µ—â–µ {len(vulns) - 3} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
    
    print("\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:")
    print(f"  output/reports/{report['report_id']}/report.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º",
        formatter_class=argparse.RawTextHelpFormatter
    )
    
    parser.add_argument('-r', '--requirements', required=True, 
                        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏')
    parser.add_argument('-c', '--code', required=True,
                        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–æ–¥–æ–º')
    parser.add_argument('-t', '--tests', 
                        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç–µ—Å—Ç–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
    parser.add_argument('-s', '--security', action='store_true',
                        help='–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
    parser.add_argument('-o', '--output',
                        help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: output/reports/{id}/report.json)')
    parser.add_argument('-j', '--json', action='store_true',
                        help='–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
    if not check_files_exist(args.requirements, args.code, args.tests):
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    ensure_directories()
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
    logger.info("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
    print("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    result = perform_analysis(
        requirements_path=args.requirements,
        code_path=args.code,
        tests_path=args.tests,
        analyze_security=args.security
    )
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if args.json:
        print(json.dumps(result, ensure_ascii=False, indent=2))
    else:
        display_report_summary(result)
        
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    if args.output:
        with open(args.output, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {args.output}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 