import logging
import json
import re
from enum import Enum
from typing import List, Dict, Any, Optional, Tuple

logger = logging.getLogger("recommender")

class PriorityLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    CRITICAL = 5
    HIGH = 4
    MEDIUM = 3
    LOW = 2
    INFO = 1
    
    @classmethod
    def from_string(cls, s: str) -> "PriorityLevel":
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        s = s.lower()
        if "–∫—Ä–∏—Ç–∏—á–µ—Å" in s or "–∫—Ä–∏—Ç–∏—á" in s:
            return cls.CRITICAL
        elif "–≤—ã—Å–æ–∫" in s:
            return cls.HIGH
        elif "—Å—Ä–µ–¥–Ω" in s:
            return cls.MEDIUM
        elif "–Ω–∏–∑–∫" in s:
            return cls.LOW
        else:
            return cls.INFO

class RecommendationType(Enum):
    """–¢–∏–ø—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    SECURITY = "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
    PERFORMANCE = "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    ARCHITECTURE = "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"
    CODE_QUALITY = "–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞"
    TESTS = "–¢–µ—Å—Ç—ã"
    DOCUMENTATION = "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    REQUIREMENTS = "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è"
    INTEGRATION = "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
    OTHER = "–î—Ä—É–≥–æ–µ"
    
    @classmethod
    def from_string(cls, s: str) -> "RecommendationType":
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        s = s.lower()
        if "–±–µ–∑–æ–ø–∞—Å" in s:
            return cls.SECURITY
        elif "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω" in s or "performan" in s:
            return cls.PERFORMANCE
        elif "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä" in s:
            return cls.ARCHITECTURE
        elif "–∫–∞—á–µ—Å—Ç–≤" in s or "–∫–æ–¥" in s:
            return cls.CODE_QUALITY
        elif "—Ç–µ—Å—Ç" in s:
            return cls.TESTS
        elif "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü" in s:
            return cls.DOCUMENTATION
        elif "—Ç—Ä–µ–±–æ–≤–∞–Ω" in s:
            return cls.REQUIREMENTS
        elif "–∏–Ω—Ç–µ–≥—Ä–∞" in s:
            return cls.INTEGRATION
        else:
            return cls.OTHER

class Recommendation:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –æ—Ç–¥–µ–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"""
    
    def __init__(
        self,
        text: str,
        priority: PriorityLevel = PriorityLevel.MEDIUM,
        recommendation_type: RecommendationType = RecommendationType.OTHER,
        affected_requirements: List[str] = None,
        affected_code: List[str] = None,
        effort_estimate: Optional[str] = None,
        expected_impact: Optional[str] = None
    ):
        self.text = text
        self.priority = priority
        self.recommendation_type = recommendation_type
        self.affected_requirements = affected_requirements or []
        self.affected_code = affected_code or []
        self.effort_estimate = effort_estimate
        self.expected_impact = expected_impact
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "text": self.text,
            "priority": self.priority.name,
            "priority_level": self.priority.value,
            "type": self.recommendation_type.value,
            "affected_requirements": self.affected_requirements,
            "affected_code": self.affected_code,
            "effort_estimate": self.effort_estimate,
            "expected_impact": self.expected_impact
        }
    
    def to_markdown(self) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç Markdown"""
        priority_indicators = {
            PriorityLevel.CRITICAL: "üî¥",
            PriorityLevel.HIGH: "üü†",
            PriorityLevel.MEDIUM: "üü°",
            PriorityLevel.LOW: "üü¢",
            PriorityLevel.INFO: "üîµ"
        }
        
        md = [
            f"### {priority_indicators.get(self.priority, '')} {self.recommendation_type.value}: {self.text}",
            f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç**: {self.priority.name}",
        ]
        
        if self.affected_requirements:
            md.append(f"**–ó–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è**: {', '.join(self.affected_requirements)}")
        
        if self.affected_code:
            md.append(f"**–ó–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∫–æ–¥**: {', '.join(self.affected_code)}")
        
        if self.effort_estimate:
            md.append(f"**–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è**: {self.effort_estimate}")
        
        if self.expected_impact:
            md.append(f"**–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç**: {self.expected_impact}")
        
        return "\n\n".join(md)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "Recommendation":
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            text=data.get("text", ""),
            priority=PriorityLevel[data.get("priority", "MEDIUM")],
            recommendation_type=RecommendationType.from_string(data.get("type", "–î—Ä—É–≥–æ–µ")),
            affected_requirements=data.get("affected_requirements", []),
            affected_code=data.get("affected_code", []),
            effort_estimate=data.get("effort_estimate", None),
            expected_impact=data.get("expected_impact", None)
        )

class RecommendationEngine:
    """–î–≤–∏–∂–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    
    def __init__(self):
        self.recommendations: List[Recommendation] = []
    
    def add_recommendation(self, recommendation: Recommendation) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫"""
        self.recommendations.append(recommendation)
    
    def parse_recommendations_from_text(self, text: str) -> List[Recommendation]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        recommendations = []
        
        # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –≤ –æ—Ç—á–µ—Ç–µ
        recommendation_patterns = [
            r"(?:–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:|–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:|–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:)[ \t]*\n*(.*?)(?=\n\n|\n*$)",
            r"(?:–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:|–ù–µ–æ–±—Ö–æ–¥–∏–º–æ:|–°–ª–µ–¥—É–µ—Ç:)[ \t]*\n*(.*?)(?=\n\n|\n*$)"
        ]
        
        found_recommendations = []
        for pattern in recommendation_patterns:
            matches = re.finditer(pattern, text, re.DOTALL)
            for match in matches:
                recommendation_text = match.group(1).strip()
                if recommendation_text and len(recommendation_text) > 10:
                    found_recommendations.append(recommendation_text)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º, –∏—â–µ–º –≤ —Å–ø–∏—Å–∫–µ —Å –¥–µ—Ñ–∏—Å–∞–º–∏
        if not found_recommendations:
            bullet_points = re.findall(r"(?<=\n)[-*]\s*(.*?)(?=\n[-*]|\n\n|\n*$)", text, re.DOTALL)
            for point in bullet_points:
                if len(point.strip()) > 15 and ("—Ä–µ–∫–æ–º–µ–Ω–¥" in point.lower() or "—Å–ª–µ–¥—É–µ—Ç" in point.lower() or "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ" in point.lower()):
                    found_recommendations.append(point.strip())
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        for rec_text in found_recommendations:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
            priority = PriorityLevel.MEDIUM
            if re.search(r"–∫—Ä–∏—Ç–∏—á|—Å—Ä–æ—á–Ω|–Ω–µ–º–µ–¥–ª–µ–Ω–Ω|—É—è–∑–≤–∏–º", rec_text.lower()):
                priority = PriorityLevel.CRITICAL
            elif re.search(r"–≤–∞–∂–Ω|–≤—ã—Å–æ–∫|—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω", rec_text.lower()):
                priority = PriorityLevel.HIGH
            elif re.search(r"–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω|–º–µ–ª–∫|–Ω–∏–∑–∫", rec_text.lower()):
                priority = PriorityLevel.LOW
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
            rec_type = RecommendationType.OTHER
            if re.search(r"–±–µ–∑–æ–ø–∞—Å–Ω|—É—è–∑–≤–∏–º|–∞—Ç–∞–∫|–∑–∞—â–∏—Ç", rec_text.lower()):
                rec_type = RecommendationType.SECURITY
            elif re.search(r"–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω|—Å–∫–æ—Ä–æ—Å—Ç|–±—ã—Å—Ç—Ä|–æ–ø—Ç–∏–º–∏–∑", rec_text.lower()):
                rec_type = RecommendationType.PERFORMANCE
            elif re.search(r"–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä|—Å—Ç—Ä—É–∫—Ç—É—Ä|–¥–∏–∑–∞–π–Ω|–ø–∞—Ç—Ç–µ—Ä–Ω", rec_text.lower()):
                rec_type = RecommendationType.ARCHITECTURE
            elif re.search(r"–∫–æ–¥|—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥|—á–∏—Ç–∞–µ–º|–ø–æ–Ω—è—Ç–Ω", rec_text.lower()):
                rec_type = RecommendationType.CODE_QUALITY
            elif re.search(r"—Ç–µ—Å—Ç|–ø–æ–∫—Ä—ã—Ç|unit|–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω", rec_text.lower()):
                rec_type = RecommendationType.TESTS
            elif re.search(r"–¥–æ–∫—É–º–µ–Ω—Ç|–∫–æ–º–º–µ–Ω—Ç|–æ–ø–∏—Å–∞–Ω", rec_text.lower()):
                rec_type = RecommendationType.DOCUMENTATION
            elif re.search(r"—Ç—Ä–µ–±–æ–≤–∞–Ω|REQ-|—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü", rec_text.lower()):
                rec_type = RecommendationType.REQUIREMENTS
            elif re.search(r"–∏–Ω—Ç–µ–≥—Ä|API|–≤–Ω–µ—à–Ω|—Å–µ—Ä–≤–∏—Å", rec_text.lower()):
                rec_type = RecommendationType.INTEGRATION
            
            # –ò—â–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            affected_reqs = re.findall(r"REQ-\d+", rec_text)
            
            # –ò—â–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–π –∫–æ–¥
            affected_code = []
            code_patterns = [r"(?:—Ñ–∞–π–ª(?:–µ|–∞—Ö)?|–º–æ–¥—É–ª(?:–µ|—è—Ö)?|–∫–ª–∞—Å—Å(?:–µ|–∞—Ö)?|–º–µ—Ç–æ–¥(?:–µ|–∞—Ö)?)[ \t]*[\"']([^\"']+)[\"']", 
                            r"(?:—Ñ–∞–π–ª(?:–µ|–∞—Ö)?|–º–æ–¥—É–ª(?:–µ|—è—Ö)?|–∫–ª–∞—Å—Å(?:–µ|–∞—Ö)?|–º–µ—Ç–æ–¥(?:–µ|–∞—Ö)?)[ \t]*`([^`]+)`"]
            for pattern in code_patterns:
                code_matches = re.finditer(pattern, rec_text)
                for match in code_matches:
                    affected_code.append(match.group(1))
            
            recommendation = Recommendation(
                text=rec_text,
                priority=priority,
                recommendation_type=rec_type,
                affected_requirements=affected_reqs,
                affected_code=affected_code
            )
            recommendations.append(recommendation)
        
        self.recommendations.extend(recommendations)
        return recommendations
    
    def get_prioritized_recommendations(self) -> List[Recommendation]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        return sorted(self.recommendations, key=lambda x: x.priority.value, reverse=True)
    
    def get_recommendations_by_type(self, recommendation_type: RecommendationType) -> List[Recommendation]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        return [r for r in self.recommendations if r.recommendation_type == recommendation_type]
    
    def get_recommendations_for_requirement(self, requirement_id: str) -> List[Recommendation]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
        return [r for r in self.recommendations if requirement_id in r.affected_requirements]
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "recommendations": [r.to_dict() for r in self.recommendations],
        }
    
    def to_markdown(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Markdown-–æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        if not self.recommendations:
            return "## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        
        prioritized = self.get_prioritized_recommendations()
        
        sections = ["# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        critical = [r for r in prioritized if r.priority == PriorityLevel.CRITICAL]
        if critical:
            sections.append("## üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n")
            for rec in critical:
                sections.append(rec.to_markdown())
                sections.append("---\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        high = [r for r in prioritized if r.priority == PriorityLevel.HIGH]
        if high:
            sections.append("## üü† –í–∞–∂–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n")
            for rec in high:
                sections.append(rec.to_markdown())
                sections.append("---\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å–æ —Å—Ä–µ–¥–Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        medium = [r for r in prioritized if r.priority == PriorityLevel.MEDIUM]
        if medium:
            sections.append("## üü° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞\n")
            for rec in medium:
                sections.append(rec.to_markdown())
                sections.append("---\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å –Ω–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        low = [r for r in prioritized if r.priority == PriorityLevel.LOW]
        if low:
            sections.append("## üü¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞\n")
            for rec in low:
                sections.append(rec.to_markdown())
                sections.append("---\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        info = [r for r in prioritized if r.priority == PriorityLevel.INFO]
        if info:
            sections.append("## üîµ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n")
            for rec in info:
                sections.append(rec.to_markdown())
                sections.append("---\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        sections.append("## –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
        sections.append(f"- **–í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π**: {len(self.recommendations)}")
        sections.append(f"- **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö**: {len(critical)}")
        sections.append(f"- **–í–∞–∂–Ω—ã—Ö**: {len(high)}")
        sections.append(f"- **–°—Ä–µ–¥–Ω–∏—Ö**: {len(medium)}")
        sections.append(f"- **–ù–∏–∑–∫–∏—Ö**: {len(low)}")
        sections.append(f"- **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö**: {len(info)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        sections.append("\n### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º\n\n")
        type_counts = {}
        for rec in self.recommendations:
            rec_type = rec.recommendation_type.value
            type_counts[rec_type] = type_counts.get(rec_type, 0) + 1
        
        for rec_type, count in sorted(type_counts.items(), key=lambda x: x[1], reverse=True):
            sections.append(f"- **{rec_type}**: {count}")
        
        return "\n\n".join(sections)
    
    def save_to_file(self, filename: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ JSON-—Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.to_dict(), f, ensure_ascii=False, indent=2)
            logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ —Ñ–∞–π–ª: {str(e)}")
    
    @classmethod
    def load_from_file(cls, filename: str) -> "RecommendationEngine":
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
        engine = cls()
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)
                recs = data.get('recommendations', [])
                for rec_data in recs:
                    recommendation = Recommendation.from_dict(rec_data)
                    engine.add_recommendation(recommendation)
            logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {filename}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞: {str(e)}")
        
        return engine

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    engine = RecommendationEngine()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    engine.add_recommendation(Recommendation(
        text="–í–Ω–µ–¥—Ä–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è API",
        priority=PriorityLevel.CRITICAL,
        recommendation_type=RecommendationType.SECURITY,
        affected_requirements=["REQ-1", "REQ-5"],
        affected_code=["api/routes.py", "auth/middleware.py"],
        effort_estimate="–°—Ä–µ–¥–Ω—è—è",
        expected_impact="–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"
    ))
    
    engine.add_recommendation(Recommendation(
        text="–î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        priority=PriorityLevel.HIGH,
        recommendation_type=RecommendationType.PERFORMANCE,
        affected_requirements=["REQ-3"],
        affected_code=["data/repository.py"],
        effort_estimate="–ù–∏–∑–∫–∞—è",
        expected_impact="–ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ ~30%"
    ))
    
    engine.add_recommendation(Recommendation(
        text="–£–ª—É—á—à–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –º–µ—Ç–æ–¥–æ–≤ API",
        priority=PriorityLevel.MEDIUM,
        recommendation_type=RecommendationType.DOCUMENTATION,
        affected_requirements=["REQ-10"],
        affected_code=["api/routes.py"],
        effort_estimate="–ù–∏–∑–∫–∞—è",
        expected_impact="–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è API –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"
    ))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    prioritized = engine.get_prioritized_recommendations()
    for rec in prioritized:
        print(f"[{rec.priority.name}] {rec.recommendation_type.value}: {rec.text}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    engine.save_to_file("recommendations_example.json")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Markdown
    markdown = engine.to_markdown()
    with open("recommendations_example.md", 'w', encoding='utf-8') as f:
        f.write(markdown)
    
    print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã recommendations_example.json –∏ recommendations_example.md") 